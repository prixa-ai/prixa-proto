// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/siloam/v1/Siloam.proto

package prixa_siloam_v1

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	regexp "regexp"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *GetAreaResponseData) Validate() error {
	for _, item := range this.AreaData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("AreaData", err)
			}
		}
	}
	return nil
}
func (this *AreaData) Validate() error {
	return nil
}

var _regex_GetHospitalRequestData_AreaId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetHospitalRequestData) Validate() error {
	if !_regex_GetHospitalRequestData_AreaId.MatchString(this.AreaId) {
		return github_com_mwitkow_go_proto_validators.FieldError("AreaId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.AreaId))
	}
	return nil
}
func (this *GetHospitalResponseData) Validate() error {
	for _, item := range this.HospitalData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("HospitalData", err)
			}
		}
	}
	return nil
}
func (this *HospitalData) Validate() error {
	return nil
}

var _regex_GetSpecialityRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetSpecialityRequestData) Validate() error {
	if !_regex_GetSpecialityRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	return nil
}
func (this *GetSpecialityResponseData) Validate() error {
	for _, item := range this.SpecialityData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("SpecialityData", err)
			}
		}
	}
	return nil
}
func (this *SpecialityData) Validate() error {
	return nil
}

var _regex_GetDoctorsRequestData_DoctorId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_GetDoctorsRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_GetDoctorsRequestData_SpecialityId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetDoctorsRequestData) Validate() error {
	if !_regex_GetDoctorsRequestData_DoctorId.MatchString(this.DoctorId) {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.DoctorId))
	}
	if !_regex_GetDoctorsRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if !_regex_GetDoctorsRequestData_SpecialityId.MatchString(this.SpecialityId) {
		return github_com_mwitkow_go_proto_validators.FieldError("SpecialityId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.SpecialityId))
	}
	return nil
}
func (this *GetDoctorsResponseData) Validate() error {
	for _, item := range this.DoctorData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("DoctorData", err)
			}
		}
	}
	return nil
}
func (this *DoctorData) Validate() error {
	return nil
}

var _regex_GetDoctorLeaveHospitalRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_GetDoctorLeaveHospitalRequestData_DoctorId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetDoctorLeaveHospitalRequestData) Validate() error {
	if !_regex_GetDoctorLeaveHospitalRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if this.HospitalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must not be an empty string`, this.HospitalId))
	}
	if !_regex_GetDoctorLeaveHospitalRequestData_DoctorId.MatchString(this.DoctorId) {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.DoctorId))
	}
	return nil
}
func (this *GetDoctorLeaveHospitalResponseData) Validate() error {
	for _, item := range this.DoctorLeaveHospitalData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("DoctorLeaveHospitalData", err)
			}
		}
	}
	return nil
}
func (this *DoctorLeaveHospitalData) Validate() error {
	if this.FromDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.FromDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("FromDate", err)
		}
	}
	if this.ToDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ToDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ToDate", err)
		}
	}
	return nil
}

var _regex_GetSchedulesPerWeeksRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_GetSchedulesPerWeeksRequestData_DoctorId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetSchedulesPerWeeksRequestData) Validate() error {
	if !_regex_GetSchedulesPerWeeksRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if this.HospitalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must not be an empty string`, this.HospitalId))
	}
	if !_regex_GetSchedulesPerWeeksRequestData_DoctorId.MatchString(this.DoctorId) {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.DoctorId))
	}
	if this.DoctorId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must not be an empty string`, this.DoctorId))
	}
	return nil
}
func (this *GetSchedulesPerWeeksResponseData) Validate() error {
	for _, item := range this.SchedulesPerWeeksData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("SchedulesPerWeeksData", err)
			}
		}
	}
	return nil
}
func (this *SchedulesPerWeeksData) Validate() error {
	if this.FromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.FromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("FromTime", err)
		}
	}
	if this.ToTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ToTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ToTime", err)
		}
	}
	return nil
}

var _regex_GetTimeSlotRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_GetTimeSlotRequestData_DoctorId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetTimeSlotRequestData) Validate() error {
	if !_regex_GetTimeSlotRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if this.HospitalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must not be an empty string`, this.HospitalId))
	}
	if !_regex_GetTimeSlotRequestData_DoctorId.MatchString(this.DoctorId) {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.DoctorId))
	}
	if this.DoctorId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must not be an empty string`, this.DoctorId))
	}
	if nil == this.AppointmentDate {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", fmt.Errorf("message must exist"))
	}
	if this.AppointmentDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", err)
		}
	}
	return nil
}
func (this *GetTimeSlotResponseData) Validate() error {
	for _, item := range this.TimeSlotData {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("TimeSlotData", err)
			}
		}
	}
	return nil
}
func (this *TimeSlotData) Validate() error {
	if this.FromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.FromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("FromTime", err)
		}
	}
	if this.ToTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ToTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ToTime", err)
		}
	}
	return nil
}

var _regex_PostAppointmentRequestData_ScheduleId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_PostAppointmentRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_PostAppointmentRequestData_DoctorId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_PostAppointmentRequestData_EmailAddress = regexp.MustCompile(`^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$`)
var _regex_PostAppointmentRequestData_UserId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *PostAppointmentRequestData) Validate() error {
	if this.ChannelId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ChannelId", fmt.Errorf(`value '%v' must not be an empty string`, this.ChannelId))
	}
	if nil == this.AppointmentDate {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", fmt.Errorf("message must exist"))
	}
	if this.AppointmentDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", err)
		}
	}
	if nil == this.AppointmentFromTime {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentFromTime", fmt.Errorf("message must exist"))
	}
	if this.AppointmentFromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentFromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentFromTime", err)
		}
	}
	if !_regex_PostAppointmentRequestData_ScheduleId.MatchString(this.ScheduleId) {
		return github_com_mwitkow_go_proto_validators.FieldError("ScheduleId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.ScheduleId))
	}
	if this.ScheduleId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ScheduleId", fmt.Errorf(`value '%v' must not be an empty string`, this.ScheduleId))
	}
	if !_regex_PostAppointmentRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if this.HospitalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must not be an empty string`, this.HospitalId))
	}
	if !_regex_PostAppointmentRequestData_DoctorId.MatchString(this.DoctorId) {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.DoctorId))
	}
	if this.DoctorId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("DoctorId", fmt.Errorf(`value '%v' must not be an empty string`, this.DoctorId))
	}
	if this.Name == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Name", fmt.Errorf(`value '%v' must not be an empty string`, this.Name))
	}
	if nil == this.BirthDate {
		return github_com_mwitkow_go_proto_validators.FieldError("BirthDate", fmt.Errorf("message must exist"))
	}
	if this.BirthDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.BirthDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("BirthDate", err)
		}
	}
	if this.PhoneNumber1 == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("PhoneNumber1", fmt.Errorf(`value '%v' must not be an empty string`, this.PhoneNumber1))
	}
	if !_regex_PostAppointmentRequestData_EmailAddress.MatchString(this.EmailAddress) {
		return github_com_mwitkow_go_proto_validators.FieldError("EmailAddress", fmt.Errorf(`value '%v' must be a string conforming to regex "^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"`, this.EmailAddress))
	}
	if !_regex_PostAppointmentRequestData_UserId.MatchString(this.UserId) {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.UserId))
	}
	if this.UserId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	return nil
}
func (this *PostAppointmentResponseData) Validate() error {
	if this.AppointmentData != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentData); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentData", err)
		}
	}
	return nil
}
func (this *PostAppointmentData) Validate() error {
	if this.AppointmentDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", err)
		}
	}
	if this.AppointmentFromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentFromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentFromTime", err)
		}
	}
	if this.AppointmentToTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentToTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentToTime", err)
		}
	}
	if this.DateOfBirth != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.DateOfBirth); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("DateOfBirth", err)
		}
	}
	return nil
}

var _regex_CancelAppointmentRequestData_UserId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *CancelAppointmentRequestData) Validate() error {
	if this.AppointmentId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentId", fmt.Errorf(`value '%v' must not be an empty string`, this.AppointmentId))
	}
	if !_regex_CancelAppointmentRequestData_UserId.MatchString(this.UserId) {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.UserId))
	}
	if this.UserId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	return nil
}
func (this *CancelAppointmentResponseData) Validate() error {
	if this.CancelAppointmentData != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.CancelAppointmentData); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("CancelAppointmentData", err)
		}
	}
	return nil
}
func (this *CancelAppointmentData) Validate() error {
	return nil
}

var _regex_PostRescheduleAppointmentRequestData_AppointmentId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_PostRescheduleAppointmentRequestData_ScheduleId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_PostRescheduleAppointmentRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_PostRescheduleAppointmentRequestData_UserId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *PostRescheduleAppointmentRequestData) Validate() error {
	if !_regex_PostRescheduleAppointmentRequestData_AppointmentId.MatchString(this.AppointmentId) {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.AppointmentId))
	}
	if this.AppointmentId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentId", fmt.Errorf(`value '%v' must not be an empty string`, this.AppointmentId))
	}
	if !_regex_PostRescheduleAppointmentRequestData_ScheduleId.MatchString(this.ScheduleId) {
		return github_com_mwitkow_go_proto_validators.FieldError("ScheduleId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.ScheduleId))
	}
	if this.ScheduleId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ScheduleId", fmt.Errorf(`value '%v' must not be an empty string`, this.ScheduleId))
	}
	if nil == this.AppointmentDate {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", fmt.Errorf("message must exist"))
	}
	if this.AppointmentDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", err)
		}
	}
	if nil == this.AppointmentFromTime {
		return github_com_mwitkow_go_proto_validators.FieldError("AppointmentFromTime", fmt.Errorf("message must exist"))
	}
	if this.AppointmentFromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentFromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentFromTime", err)
		}
	}
	if !_regex_PostRescheduleAppointmentRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if this.HospitalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must not be an empty string`, this.HospitalId))
	}
	if !_regex_PostRescheduleAppointmentRequestData_UserId.MatchString(this.UserId) {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.UserId))
	}
	if this.UserId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	return nil
}
func (this *PostRescheduleAppointmentResponseData) Validate() error {
	if this.RescheduleAppointmentData != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.RescheduleAppointmentData); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("RescheduleAppointmentData", err)
		}
	}
	return nil
}
func (this *RescheduleAppointmentData) Validate() error {
	if this.AppointmentDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", err)
		}
	}
	return nil
}

var _regex_GetAppointmentRequestData_ContactId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)
var _regex_GetAppointmentRequestData_HospitalId = regexp.MustCompile(`^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$`)

func (this *GetAppointmentRequestData) Validate() error {
	if !_regex_GetAppointmentRequestData_ContactId.MatchString(this.ContactId) {
		return github_com_mwitkow_go_proto_validators.FieldError("ContactId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.ContactId))
	}
	if this.ContactId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("ContactId", fmt.Errorf(`value '%v' must not be an empty string`, this.ContactId))
	}
	if !_regex_GetAppointmentRequestData_HospitalId.MatchString(this.HospitalId) {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must be a string conforming to regex "^([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[4][a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})?$"`, this.HospitalId))
	}
	if this.HospitalId == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("HospitalId", fmt.Errorf(`value '%v' must not be an empty string`, this.HospitalId))
	}
	return nil
}
func (this *GetAppointmentResponseData) Validate() error {
	if this.AppointmentData != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentData); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentData", err)
		}
	}
	return nil
}
func (this *GetAppointmentData) Validate() error {
	if this.AppointmentFromTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentFromTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentFromTime", err)
		}
	}
	if this.AppointmentToTime != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentToTime); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentToTime", err)
		}
	}
	if this.AppointmentDate != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.AppointmentDate); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("AppointmentDate", err)
		}
	}
	return nil
}
