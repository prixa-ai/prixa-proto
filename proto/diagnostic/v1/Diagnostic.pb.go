// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: proto/diagnostic/v1/Diagnostic.proto

package prixa_diagnostic_v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UpdateSourceRequest_Source int32

const (
	UpdateSourceRequest_AIRTABLE      UpdateSourceRequest_Source = 0
	UpdateSourceRequest_ELASTICSEARCH UpdateSourceRequest_Source = 1
)

// Enum value maps for UpdateSourceRequest_Source.
var (
	UpdateSourceRequest_Source_name = map[int32]string{
		0: "AIRTABLE",
		1: "ELASTICSEARCH",
	}
	UpdateSourceRequest_Source_value = map[string]int32{
		"AIRTABLE":      0,
		"ELASTICSEARCH": 1,
	}
)

func (x UpdateSourceRequest_Source) Enum() *UpdateSourceRequest_Source {
	p := new(UpdateSourceRequest_Source)
	*p = x
	return p
}

func (x UpdateSourceRequest_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateSourceRequest_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_diagnostic_v1_Diagnostic_proto_enumTypes[0].Descriptor()
}

func (UpdateSourceRequest_Source) Type() protoreflect.EnumType {
	return &file_proto_diagnostic_v1_Diagnostic_proto_enumTypes[0]
}

func (x UpdateSourceRequest_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateSourceRequest_Source.Descriptor instead.
func (UpdateSourceRequest_Source) EnumDescriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{36, 0}
}

type GetDiagnosisResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticSessionID string `protobuf:"bytes,1,opt,name=diagnosticSessionID,proto3" json:"diagnosticSessionID,omitempty"`
}

func (x *GetDiagnosisResultRequest) Reset() {
	*x = GetDiagnosisResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisResultRequest) ProtoMessage() {}

func (x *GetDiagnosisResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisResultRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosisResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{0}
}

func (x *GetDiagnosisResultRequest) GetDiagnosticSessionID() string {
	if x != nil {
		return x.DiagnosticSessionID
	}
	return ""
}

type GetDiagnosisResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Patient            *PatientData    `protobuf:"bytes,2,opt,name=patient,proto3" json:"patient,omitempty"`
	Diseases           []string        `protobuf:"bytes,3,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Symptom            *SymptomsData   `protobuf:"bytes,4,opt,name=symptom,proto3" json:"symptom,omitempty"`
	AssociatedSymptoms []*SymptomsData `protobuf:"bytes,5,rep,name=associatedSymptoms,proto3" json:"associatedSymptoms,omitempty"`
}

func (x *GetDiagnosisResultResponse) Reset() {
	*x = GetDiagnosisResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisResultResponse) ProtoMessage() {}

func (x *GetDiagnosisResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisResultResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosisResultResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{1}
}

func (x *GetDiagnosisResultResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetDiagnosisResultResponse) GetPatient() *PatientData {
	if x != nil {
		return x.Patient
	}
	return nil
}

func (x *GetDiagnosisResultResponse) GetDiseases() []string {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *GetDiagnosisResultResponse) GetSymptom() *SymptomsData {
	if x != nil {
		return x.Symptom
	}
	return nil
}

func (x *GetDiagnosisResultResponse) GetAssociatedSymptoms() []*SymptomsData {
	if x != nil {
		return x.AssociatedSymptoms
	}
	return nil
}

type PatientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gender        string   `protobuf:"bytes,1,opt,name=gender,proto3" json:"gender,omitempty"`
	Weight        float32  `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Height        float32  `protobuf:"fixed32,3,opt,name=height,proto3" json:"height,omitempty"`
	Age           int32    `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	Bmi           string   `protobuf:"bytes,5,opt,name=bmi,proto3" json:"bmi,omitempty"`
	Preconditions []string `protobuf:"bytes,6,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
}

func (x *PatientData) Reset() {
	*x = PatientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatientData) ProtoMessage() {}

func (x *PatientData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatientData.ProtoReflect.Descriptor instead.
func (*PatientData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{2}
}

func (x *PatientData) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *PatientData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *PatientData) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PatientData) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PatientData) GetBmi() string {
	if x != nil {
		return x.Bmi
	}
	return ""
}

func (x *PatientData) GetPreconditions() []string {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

type SymptomsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties []string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *SymptomsData) Reset() {
	*x = SymptomsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymptomsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymptomsData) ProtoMessage() {}

func (x *SymptomsData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymptomsData.ProtoReflect.Descriptor instead.
func (*SymptomsData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{3}
}

func (x *SymptomsData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SymptomsData) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type GeoLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{4}
}

func (x *GeoLocation) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoLocation) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type BotConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId   string       `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Reply       *ReplyData   `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
	GeoLocation *GeoLocation `protobuf:"bytes,3,opt,name=geoLocation,proto3" json:"geoLocation,omitempty"`
	Uid         string       `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *BotConversationRequest) Reset() {
	*x = BotConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotConversationRequest) ProtoMessage() {}

func (x *BotConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotConversationRequest.ProtoReflect.Descriptor instead.
func (*BotConversationRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{5}
}

func (x *BotConversationRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BotConversationRequest) GetReply() *ReplyData {
	if x != nil {
		return x.Reply
	}
	return nil
}

func (x *BotConversationRequest) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *BotConversationRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag           string               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type          string               `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value         string               `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Preconditions []*PreconditionsData `protobuf:"bytes,4,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
}

func (x *ReplyData) Reset() {
	*x = ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyData) ProtoMessage() {}

func (x *ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyData.ProtoReflect.Descriptor instead.
func (*ReplyData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{6}
}

func (x *ReplyData) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ReplyData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ReplyData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReplyData) GetPreconditions() []*PreconditionsData {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

type PreconditionsDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PreconditionsDataRequestProp `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (x *PreconditionsDataRequest) Reset() {
	*x = PreconditionsDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreconditionsDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreconditionsDataRequest) ProtoMessage() {}

func (x *PreconditionsDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreconditionsDataRequest.ProtoReflect.Descriptor instead.
func (*PreconditionsDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{7}
}

func (x *PreconditionsDataRequest) GetData() []*PreconditionsDataRequestProp {
	if x != nil {
		return x.Data
	}
	return nil
}

type PreconditionsDataRequestProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Values string `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *PreconditionsDataRequestProp) Reset() {
	*x = PreconditionsDataRequestProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreconditionsDataRequestProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreconditionsDataRequestProp) ProtoMessage() {}

func (x *PreconditionsDataRequestProp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreconditionsDataRequestProp.ProtoReflect.Descriptor instead.
func (*PreconditionsDataRequestProp) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{8}
}

func (x *PreconditionsDataRequestProp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PreconditionsDataRequestProp) GetValues() string {
	if x != nil {
		return x.Values
	}
	return ""
}

type BotConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId             string       `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Result                *ResultData  `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ProgressBarPercentage float32      `protobuf:"fixed32,3,opt,name=progressBarPercentage,proto3" json:"progressBarPercentage,omitempty"`
	LogEvents             []*LogEvents `protobuf:"bytes,4,rep,name=logEvents,proto3" json:"logEvents,omitempty"`
}

func (x *BotConversationResponse) Reset() {
	*x = BotConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotConversationResponse) ProtoMessage() {}

func (x *BotConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotConversationResponse.ProtoReflect.Descriptor instead.
func (*BotConversationResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{9}
}

func (x *BotConversationResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BotConversationResponse) GetResult() *ResultData {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BotConversationResponse) GetProgressBarPercentage() float32 {
	if x != nil {
		return x.ProgressBarPercentage
	}
	return 0
}

func (x *BotConversationResponse) GetLogEvents() []*LogEvents {
	if x != nil {
		return x.LogEvents
	}
	return nil
}

type ResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      *MessagesData        `protobuf:"bytes,1,opt,name=messages,proto3" json:"messages,omitempty"`
	Actions       *ActionData          `protobuf:"bytes,2,opt,name=actions,proto3" json:"actions,omitempty"`
	Preconditions []*PreconditionsData `protobuf:"bytes,3,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	CurrentState  string               `protobuf:"bytes,4,opt,name=currentState,proto3" json:"currentState,omitempty"`
	SymptomID     string               `protobuf:"bytes,5,opt,name=symptomID,proto3" json:"symptomID,omitempty"`
	IsValidForRDT bool                 `protobuf:"varint,6,opt,name=isValidForRDT,proto3" json:"isValidForRDT,omitempty"`
}

func (x *ResultData) Reset() {
	*x = ResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultData) ProtoMessage() {}

func (x *ResultData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultData.ProtoReflect.Descriptor instead.
func (*ResultData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{10}
}

func (x *ResultData) GetMessages() *MessagesData {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ResultData) GetActions() *ActionData {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ResultData) GetPreconditions() []*PreconditionsData {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *ResultData) GetCurrentState() string {
	if x != nil {
		return x.CurrentState
	}
	return ""
}

func (x *ResultData) GetSymptomID() string {
	if x != nil {
		return x.SymptomID
	}
	return ""
}

func (x *ResultData) GetIsValidForRDT() bool {
	if x != nil {
		return x.IsValidForRDT
	}
	return false
}

type MessagesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Explanation string `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
	Media       string `protobuf:"bytes,3,opt,name=media,proto3" json:"media,omitempty"`
	SourceURL   string `protobuf:"bytes,4,opt,name=sourceURL,proto3" json:"sourceURL,omitempty"`
}

func (x *MessagesData) Reset() {
	*x = MessagesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagesData) ProtoMessage() {}

func (x *MessagesData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagesData.ProtoReflect.Descriptor instead.
func (*MessagesData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{11}
}

func (x *MessagesData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MessagesData) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

func (x *MessagesData) GetMedia() string {
	if x != nil {
		return x.Media
	}
	return ""
}

func (x *MessagesData) GetSourceURL() string {
	if x != nil {
		return x.SourceURL
	}
	return ""
}

type ActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value           []*ValueData         `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
	DiagnosisResult *DiagnosisResultData `protobuf:"bytes,3,opt,name=diagnosisResult,proto3" json:"diagnosisResult,omitempty"`
}

func (x *ActionData) Reset() {
	*x = ActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionData) ProtoMessage() {}

func (x *ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionData.ProtoReflect.Descriptor instead.
func (*ActionData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{12}
}

func (x *ActionData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActionData) GetValue() []*ValueData {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ActionData) GetDiagnosisResult() *DiagnosisResultData {
	if x != nil {
		return x.DiagnosisResult
	}
	return nil
}

type ValueData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Tag         string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ValueData) Reset() {
	*x = ValueData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueData) ProtoMessage() {}

func (x *ValueData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueData.ProtoReflect.Descriptor instead.
func (*ValueData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{13}
}

func (x *ValueData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ValueData) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ValueData) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ValueData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DiagnosisResultData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *UserData           `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	UserDetails *UserDetailsData    `protobuf:"bytes,2,opt,name=userDetails,proto3" json:"userDetails,omitempty"`
	Profiles    []*ProfileData      `protobuf:"bytes,3,rep,name=profiles,proto3" json:"profiles,omitempty"`
	Symptoms    []*SymptomDesc      `protobuf:"bytes,4,rep,name=symptoms,proto3" json:"symptoms,omitempty"`
	Diseases    []*PotentialDisease `protobuf:"bytes,5,rep,name=diseases,proto3" json:"diseases,omitempty"`
}

func (x *DiagnosisResultData) Reset() {
	*x = DiagnosisResultData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosisResultData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosisResultData) ProtoMessage() {}

func (x *DiagnosisResultData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosisResultData.ProtoReflect.Descriptor instead.
func (*DiagnosisResultData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{14}
}

func (x *DiagnosisResultData) GetUser() *UserData {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DiagnosisResultData) GetUserDetails() *UserDetailsData {
	if x != nil {
		return x.UserDetails
	}
	return nil
}

func (x *DiagnosisResultData) GetProfiles() []*ProfileData {
	if x != nil {
		return x.Profiles
	}
	return nil
}

func (x *DiagnosisResultData) GetSymptoms() []*SymptomDesc {
	if x != nil {
		return x.Symptoms
	}
	return nil
}

func (x *DiagnosisResultData) GetDiseases() []*PotentialDisease {
	if x != nil {
		return x.Diseases
	}
	return nil
}

type UserDetailsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgeYear   int32  `protobuf:"varint,1,opt,name=ageYear,proto3" json:"ageYear,omitempty"`
	AgeMonth  int32  `protobuf:"varint,2,opt,name=ageMonth,proto3" json:"ageMonth,omitempty"`
	Firstname string `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	IsObese   bool   `protobuf:"varint,4,opt,name=isObese,proto3" json:"isObese,omitempty"`
}

func (x *UserDetailsData) Reset() {
	*x = UserDetailsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDetailsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailsData) ProtoMessage() {}

func (x *UserDetailsData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailsData.ProtoReflect.Descriptor instead.
func (*UserDetailsData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{15}
}

func (x *UserDetailsData) GetAgeYear() int32 {
	if x != nil {
		return x.AgeYear
	}
	return 0
}

func (x *UserDetailsData) GetAgeMonth() int32 {
	if x != nil {
		return x.AgeMonth
	}
	return 0
}

func (x *UserDetailsData) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *UserDetailsData) GetIsObese() bool {
	if x != nil {
		return x.IsObese
	}
	return false
}

type ProfileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameIndo    string `protobuf:"bytes,3,opt,name=nameIndo,proto3" json:"nameIndo,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Order       int32  `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ProfileData) Reset() {
	*x = ProfileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileData) ProtoMessage() {}

func (x *ProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileData.ProtoReflect.Descriptor instead.
func (*ProfileData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{16}
}

func (x *ProfileData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProfileData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProfileData) GetNameIndo() string {
	if x != nil {
		return x.NameIndo
	}
	return ""
}

func (x *ProfileData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProfileData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProfileData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SymptomDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymptomID      string   `protobuf:"bytes,1,opt,name=symptomID,proto3" json:"symptomID,omitempty"`
	SymptomName    string   `protobuf:"bytes,2,opt,name=symptomName,proto3" json:"symptomName,omitempty"`
	PropNames      []string `protobuf:"bytes,3,rep,name=propNames,proto3" json:"propNames,omitempty"`
	Chief          bool     `protobuf:"varint,4,opt,name=chief,proto3" json:"chief,omitempty"`
	SymptomsTriage []string `protobuf:"bytes,5,rep,name=symptomsTriage,proto3" json:"symptomsTriage,omitempty"`
	Answer         string   `protobuf:"bytes,6,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *SymptomDesc) Reset() {
	*x = SymptomDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymptomDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymptomDesc) ProtoMessage() {}

func (x *SymptomDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymptomDesc.ProtoReflect.Descriptor instead.
func (*SymptomDesc) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{17}
}

func (x *SymptomDesc) GetSymptomID() string {
	if x != nil {
		return x.SymptomID
	}
	return ""
}

func (x *SymptomDesc) GetSymptomName() string {
	if x != nil {
		return x.SymptomName
	}
	return ""
}

func (x *SymptomDesc) GetPropNames() []string {
	if x != nil {
		return x.PropNames
	}
	return nil
}

func (x *SymptomDesc) GetChief() bool {
	if x != nil {
		return x.Chief
	}
	return false
}

func (x *SymptomDesc) GetSymptomsTriage() []string {
	if x != nil {
		return x.SymptomsTriage
	}
	return nil
}

func (x *SymptomDesc) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type PotentialDisease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Likeliness  string        `protobuf:"bytes,4,opt,name=likeliness,proto3" json:"likeliness,omitempty"`
	Score       float32       `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	Url         string        `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Triage      *TriageResult `protobuf:"bytes,7,opt,name=triage,proto3" json:"triage,omitempty"`
	Labs        []*LabInfo    `protobuf:"bytes,8,rep,name=labs,proto3" json:"labs,omitempty"`
	Prognosis   string        `protobuf:"bytes,9,opt,name=prognosis,proto3" json:"prognosis,omitempty"`
}

func (x *PotentialDisease) Reset() {
	*x = PotentialDisease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotentialDisease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotentialDisease) ProtoMessage() {}

func (x *PotentialDisease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotentialDisease.ProtoReflect.Descriptor instead.
func (*PotentialDisease) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{18}
}

func (x *PotentialDisease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PotentialDisease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PotentialDisease) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PotentialDisease) GetLikeliness() string {
	if x != nil {
		return x.Likeliness
	}
	return ""
}

func (x *PotentialDisease) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PotentialDisease) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PotentialDisease) GetTriage() *TriageResult {
	if x != nil {
		return x.Triage
	}
	return nil
}

func (x *PotentialDisease) GetLabs() []*LabInfo {
	if x != nil {
		return x.Labs
	}
	return nil
}

func (x *PotentialDisease) GetPrognosis() string {
	if x != nil {
		return x.Prognosis
	}
	return ""
}

type TriageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameIndo    string `protobuf:"bytes,3,opt,name=nameIndo,proto3" json:"nameIndo,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *TriageResult) Reset() {
	*x = TriageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriageResult) ProtoMessage() {}

func (x *TriageResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriageResult.ProtoReflect.Descriptor instead.
func (*TriageResult) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{19}
}

func (x *TriageResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TriageResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriageResult) GetNameIndo() string {
	if x != nil {
		return x.NameIndo
	}
	return ""
}

func (x *TriageResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type LabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sku      string   `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty"`
	Diseases []string `protobuf:"bytes,4,rep,name=diseases,proto3" json:"diseases,omitempty"`
}

func (x *LabInfo) Reset() {
	*x = LabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabInfo) ProtoMessage() {}

func (x *LabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabInfo.ProtoReflect.Descriptor instead.
func (*LabInfo) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{20}
}

func (x *LabInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LabInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LabInfo) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *LabInfo) GetDiseases() []string {
	if x != nil {
		return x.Diseases
	}
	return nil
}

type PreconditionsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                         string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	NameIndo                     string  `protobuf:"bytes,3,opt,name=nameIndo,proto3" json:"nameIndo,omitempty"`
	PreconditionsDescription     string  `protobuf:"bytes,4,opt,name=preconditionsDescription,proto3" json:"preconditionsDescription,omitempty"`
	PreconditionsDescriptionCopy string  `protobuf:"bytes,5,opt,name=preconditionsDescriptionCopy,proto3" json:"preconditionsDescriptionCopy,omitempty"`
	AgeMonth                     int64   `protobuf:"varint,6,opt,name=ageMonth,proto3" json:"ageMonth,omitempty"`
	AgeYear                      int64   `protobuf:"varint,7,opt,name=ageYear,proto3" json:"ageYear,omitempty"`
	Weight                       float32 `protobuf:"fixed32,8,opt,name=weight,proto3" json:"weight,omitempty"`
	Height                       float32 `protobuf:"fixed32,9,opt,name=height,proto3" json:"height,omitempty"`
	Name                         string  `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PreconditionsData) Reset() {
	*x = PreconditionsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreconditionsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreconditionsData) ProtoMessage() {}

func (x *PreconditionsData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreconditionsData.ProtoReflect.Descriptor instead.
func (*PreconditionsData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{21}
}

func (x *PreconditionsData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PreconditionsData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PreconditionsData) GetNameIndo() string {
	if x != nil {
		return x.NameIndo
	}
	return ""
}

func (x *PreconditionsData) GetPreconditionsDescription() string {
	if x != nil {
		return x.PreconditionsDescription
	}
	return ""
}

func (x *PreconditionsData) GetPreconditionsDescriptionCopy() string {
	if x != nil {
		return x.PreconditionsDescriptionCopy
	}
	return ""
}

func (x *PreconditionsData) GetAgeMonth() int64 {
	if x != nil {
		return x.AgeMonth
	}
	return 0
}

func (x *PreconditionsData) GetAgeYear() int64 {
	if x != nil {
		return x.AgeYear
	}
	return 0
}

func (x *PreconditionsData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *PreconditionsData) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PreconditionsData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LogEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer         string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	ApplicationId  string `protobuf:"bytes,2,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	PartnerId      string `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	PrixaSessionId string `protobuf:"bytes,4,opt,name=prixaSessionId,proto3" json:"prixaSessionId,omitempty"`
	PrixaUserId    string `protobuf:"bytes,5,opt,name=prixaUserId,proto3" json:"prixaUserId,omitempty"`
	Question       string `protobuf:"bytes,6,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *LogEvents) Reset() {
	*x = LogEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvents) ProtoMessage() {}

func (x *LogEvents) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvents.ProtoReflect.Descriptor instead.
func (*LogEvents) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{22}
}

func (x *LogEvents) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *LogEvents) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *LogEvents) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *LogEvents) GetPrixaSessionId() string {
	if x != nil {
		return x.PrixaSessionId
	}
	return ""
}

func (x *LogEvents) GetPrixaUserId() string {
	if x != nil {
		return x.PrixaUserId
	}
	return ""
}

func (x *LogEvents) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

type CreatePrixaSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerId    string    `protobuf:"bytes,1,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	PartnerAppId string    `protobuf:"bytes,2,opt,name=partnerAppId,proto3" json:"partnerAppId,omitempty"`
	UserData     *UserData `protobuf:"bytes,3,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *CreatePrixaSessionRequest) Reset() {
	*x = CreatePrixaSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrixaSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrixaSessionRequest) ProtoMessage() {}

func (x *CreatePrixaSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrixaSessionRequest.ProtoReflect.Descriptor instead.
func (*CreatePrixaSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{23}
}

func (x *CreatePrixaSessionRequest) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *CreatePrixaSessionRequest) GetPartnerAppId() string {
	if x != nil {
		return x.PartnerAppId
	}
	return ""
}

func (x *CreatePrixaSessionRequest) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type CreatePrixaSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string    `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	UserData  *UserData `protobuf:"bytes,2,opt,name=userData,proto3" json:"userData,omitempty"`
}

func (x *CreatePrixaSessionResponse) Reset() {
	*x = CreatePrixaSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrixaSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrixaSessionResponse) ProtoMessage() {}

func (x *CreatePrixaSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrixaSessionResponse.ProtoReflect.Descriptor instead.
func (*CreatePrixaSessionResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{24}
}

func (x *CreatePrixaSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreatePrixaSessionResponse) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Fullname  string           `protobuf:"bytes,2,opt,name=fullname,proto3" json:"fullname,omitempty"`
	Gender    string           `protobuf:"bytes,3,opt,name=gender,proto3" json:"gender,omitempty"`
	Birthdate string           `protobuf:"bytes,4,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Weight    float32          `protobuf:"fixed32,5,opt,name=weight,proto3" json:"weight,omitempty"`
	Height    float32          `protobuf:"fixed32,6,opt,name=height,proto3" json:"height,omitempty"`
	Insurance *InsuranceStatus `protobuf:"bytes,7,opt,name=insurance,proto3" json:"insurance,omitempty"`
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{25}
}

func (x *UserData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserData) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *UserData) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserData) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *UserData) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *UserData) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UserData) GetInsurance() *InsuranceStatus {
	if x != nil {
		return x.Insurance
	}
	return nil
}

type InsuranceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HaveInsurance       bool `protobuf:"varint,1,opt,name=haveInsurance,proto3" json:"haveInsurance,omitempty"`
	PlanToHaveInsurance bool `protobuf:"varint,2,opt,name=planToHaveInsurance,proto3" json:"planToHaveInsurance,omitempty"`
}

func (x *InsuranceStatus) Reset() {
	*x = InsuranceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsuranceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsuranceStatus) ProtoMessage() {}

func (x *InsuranceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsuranceStatus.ProtoReflect.Descriptor instead.
func (*InsuranceStatus) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{26}
}

func (x *InsuranceStatus) GetHaveInsurance() bool {
	if x != nil {
		return x.HaveInsurance
	}
	return false
}

func (x *InsuranceStatus) GetPlanToHaveInsurance() bool {
	if x != nil {
		return x.PlanToHaveInsurance
	}
	return false
}

type SendEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SendEmailRequest) Reset() {
	*x = SendEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmailRequest) ProtoMessage() {}

func (x *SendEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmailRequest.ProtoReflect.Descriptor instead.
func (*SendEmailRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{27}
}

func (x *SendEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SendEmailRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendEmailRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SendEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendEmailResponse) Reset() {
	*x = SendEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmailResponse) ProtoMessage() {}

func (x *SendEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmailResponse.ProtoReflect.Descriptor instead.
func (*SendEmailResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{28}
}

func (x *SendEmailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendSurveyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	Feedback      string `protobuf:"bytes,2,opt,name=feedback,proto3" json:"feedback,omitempty"`
	PartnerId     string `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	Rating        int32  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`
	SessionId     string `protobuf:"bytes,5,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	UserId        string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *SendSurveyRequest) Reset() {
	*x = SendSurveyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSurveyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSurveyRequest) ProtoMessage() {}

func (x *SendSurveyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSurveyRequest.ProtoReflect.Descriptor instead.
func (*SendSurveyRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{29}
}

func (x *SendSurveyRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SendSurveyRequest) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *SendSurveyRequest) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *SendSurveyRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SendSurveyRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendSurveyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FeedbackContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question    string   `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Instruction string   `protobuf:"bytes,2,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Choices     []string `protobuf:"bytes,3,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *FeedbackContentResponse) Reset() {
	*x = FeedbackContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackContentResponse) ProtoMessage() {}

func (x *FeedbackContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackContentResponse.ProtoReflect.Descriptor instead.
func (*FeedbackContentResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{30}
}

func (x *FeedbackContentResponse) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *FeedbackContentResponse) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *FeedbackContentResponse) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

type SendFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId     string   `protobuf:"bytes,2,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	ApplicationId string   `protobuf:"bytes,3,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	SessionId     string   `protobuf:"bytes,4,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	SymptomId     string   `protobuf:"bytes,5,opt,name=symptomId,proto3" json:"symptomId,omitempty"`
	Question      string   `protobuf:"bytes,6,opt,name=question,proto3" json:"question,omitempty"`
	Feedbacks     []string `protobuf:"bytes,7,rep,name=feedbacks,proto3" json:"feedbacks,omitempty"`
	Detail        string   `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *SendFeedbackRequest) Reset() {
	*x = SendFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFeedbackRequest) ProtoMessage() {}

func (x *SendFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFeedbackRequest.ProtoReflect.Descriptor instead.
func (*SendFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{31}
}

func (x *SendFeedbackRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendFeedbackRequest) GetPartnerId() string {
	if x != nil {
		return x.PartnerId
	}
	return ""
}

func (x *SendFeedbackRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *SendFeedbackRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendFeedbackRequest) GetSymptomId() string {
	if x != nil {
		return x.SymptomId
	}
	return ""
}

func (x *SendFeedbackRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *SendFeedbackRequest) GetFeedbacks() []string {
	if x != nil {
		return x.Feedbacks
	}
	return nil
}

func (x *SendFeedbackRequest) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type SendFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *SendFeedbackResponse) Reset() {
	*x = SendFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFeedbackResponse) ProtoMessage() {}

func (x *SendFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFeedbackResponse.ProtoReflect.Descriptor instead.
func (*SendFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{32}
}

func (x *SendFeedbackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetDiseaseArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiseaseID string `protobuf:"bytes,1,opt,name=diseaseID,proto3" json:"diseaseID,omitempty"`
}

func (x *GetDiseaseArticleRequest) Reset() {
	*x = GetDiseaseArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseArticleRequest) ProtoMessage() {}

func (x *GetDiseaseArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseArticleRequest.ProtoReflect.Descriptor instead.
func (*GetDiseaseArticleRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{33}
}

func (x *GetDiseaseArticleRequest) GetDiseaseID() string {
	if x != nil {
		return x.DiseaseID
	}
	return ""
}

type GetDiseaseArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DiseaseName         string   `protobuf:"bytes,2,opt,name=diseaseName,proto3" json:"diseaseName,omitempty"`
	DiseaseNameIndo     string   `protobuf:"bytes,3,opt,name=diseaseNameIndo,proto3" json:"diseaseNameIndo,omitempty"`
	Author              string   `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	CheckedBy           string   `protobuf:"bytes,5,opt,name=checkedBy,proto3" json:"checkedBy,omitempty"`
	Overview            string   `protobuf:"bytes,6,opt,name=overview,proto3" json:"overview,omitempty"`
	Advice              string   `protobuf:"bytes,7,opt,name=advice,proto3" json:"advice,omitempty"`
	NonMedicalTreatment string   `protobuf:"bytes,8,opt,name=nonMedicalTreatment,proto3" json:"nonMedicalTreatment,omitempty"`
	MedicalTreatment    string   `protobuf:"bytes,9,opt,name=medicalTreatment,proto3" json:"medicalTreatment,omitempty"`
	SupportingLabs      string   `protobuf:"bytes,10,opt,name=supportingLabs,proto3" json:"supportingLabs,omitempty"`
	SeeDoctor           string   `protobuf:"bytes,11,opt,name=seeDoctor,proto3" json:"seeDoctor,omitempty"`
	HowToPrevent        string   `protobuf:"bytes,12,opt,name=howToPrevent,proto3" json:"howToPrevent,omitempty"`
	Prevention          string   `protobuf:"bytes,13,opt,name=prevention,proto3" json:"prevention,omitempty"`
	Reference           string   `protobuf:"bytes,14,opt,name=reference,proto3" json:"reference,omitempty"`
	RelatedSymptom      []string `protobuf:"bytes,15,rep,name=relatedSymptom,proto3" json:"relatedSymptom,omitempty"`
}

func (x *GetDiseaseArticleResponse) Reset() {
	*x = GetDiseaseArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseArticleResponse) ProtoMessage() {}

func (x *GetDiseaseArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseArticleResponse.ProtoReflect.Descriptor instead.
func (*GetDiseaseArticleResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{34}
}

func (x *GetDiseaseArticleResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetDiseaseName() string {
	if x != nil {
		return x.DiseaseName
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetDiseaseNameIndo() string {
	if x != nil {
		return x.DiseaseNameIndo
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetCheckedBy() string {
	if x != nil {
		return x.CheckedBy
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetOverview() string {
	if x != nil {
		return x.Overview
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetNonMedicalTreatment() string {
	if x != nil {
		return x.NonMedicalTreatment
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetMedicalTreatment() string {
	if x != nil {
		return x.MedicalTreatment
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetSupportingLabs() string {
	if x != nil {
		return x.SupportingLabs
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetSeeDoctor() string {
	if x != nil {
		return x.SeeDoctor
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetHowToPrevent() string {
	if x != nil {
		return x.HowToPrevent
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetPrevention() string {
	if x != nil {
		return x.Prevention
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *GetDiseaseArticleResponse) GetRelatedSymptom() []string {
	if x != nil {
		return x.RelatedSymptom
	}
	return nil
}

type GetDiagnosticStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymptomsCount        string `protobuf:"bytes,1,opt,name=symptomsCount,proto3" json:"symptomsCount,omitempty"`
	DiseaseCount         string `protobuf:"bytes,2,opt,name=diseaseCount,proto3" json:"diseaseCount,omitempty"`
	DifferentialsCount   string `protobuf:"bytes,3,opt,name=differentialsCount,proto3" json:"differentialsCount,omitempty"`
	ArticlesCount        string `protobuf:"bytes,4,opt,name=articlesCount,proto3" json:"articlesCount,omitempty"`
	ProfilesCount        string `protobuf:"bytes,5,opt,name=profilesCount,proto3" json:"profilesCount,omitempty"`
	TypesCount           string `protobuf:"bytes,6,opt,name=typesCount,proto3" json:"typesCount,omitempty"`
	PropertiesCount      string `protobuf:"bytes,7,opt,name=propertiesCount,proto3" json:"propertiesCount,omitempty"`
	CharacteristicsCount string `protobuf:"bytes,8,opt,name=characteristicsCount,proto3" json:"characteristicsCount,omitempty"`
}

func (x *GetDiagnosticStatisticsResponse) Reset() {
	*x = GetDiagnosticStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosticStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosticStatisticsResponse) ProtoMessage() {}

func (x *GetDiagnosticStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosticStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosticStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{35}
}

func (x *GetDiagnosticStatisticsResponse) GetSymptomsCount() string {
	if x != nil {
		return x.SymptomsCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetDiseaseCount() string {
	if x != nil {
		return x.DiseaseCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetDifferentialsCount() string {
	if x != nil {
		return x.DifferentialsCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetArticlesCount() string {
	if x != nil {
		return x.ArticlesCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetProfilesCount() string {
	if x != nil {
		return x.ProfilesCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetTypesCount() string {
	if x != nil {
		return x.TypesCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetPropertiesCount() string {
	if x != nil {
		return x.PropertiesCount
	}
	return ""
}

func (x *GetDiagnosticStatisticsResponse) GetCharacteristicsCount() string {
	if x != nil {
		return x.CharacteristicsCount
	}
	return ""
}

type UpdateSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string                     `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Source UpdateSourceRequest_Source `protobuf:"varint,2,opt,name=source,proto3,enum=prixa.diagnostic.v1.UpdateSourceRequest_Source" json:"source,omitempty"`
}

func (x *UpdateSourceRequest) Reset() {
	*x = UpdateSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSourceRequest) ProtoMessage() {}

func (x *UpdateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateSourceRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateSourceRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateSourceRequest) GetSource() UpdateSourceRequest_Source {
	if x != nil {
		return x.Source
	}
	return UpdateSourceRequest_AIRTABLE
}

type CovidForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartnerID           string               `protobuf:"bytes,1,opt,name=partnerID,proto3" json:"partnerID,omitempty"`
	AppID               string               `protobuf:"bytes,2,opt,name=appID,proto3" json:"appID,omitempty"`
	DiagnosticSessionID string               `protobuf:"bytes,3,opt,name=diagnosticSessionID,proto3" json:"diagnosticSessionID,omitempty"`
	Name                string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Phone               string               `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email               string               `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	City                string               `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	Province            string               `protobuf:"bytes,8,opt,name=province,proto3" json:"province,omitempty"`
	Timestamp           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CovidForm) Reset() {
	*x = CovidForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CovidForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CovidForm) ProtoMessage() {}

func (x *CovidForm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CovidForm.ProtoReflect.Descriptor instead.
func (*CovidForm) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{37}
}

func (x *CovidForm) GetPartnerID() string {
	if x != nil {
		return x.PartnerID
	}
	return ""
}

func (x *CovidForm) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CovidForm) GetDiagnosticSessionID() string {
	if x != nil {
		return x.DiagnosticSessionID
	}
	return ""
}

func (x *CovidForm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CovidForm) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CovidForm) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CovidForm) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CovidForm) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CovidForm) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type SendCovidFormRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CovidForm *CovidForm `protobuf:"bytes,1,opt,name=covidForm,proto3" json:"covidForm,omitempty"`
}

func (x *SendCovidFormRequest) Reset() {
	*x = SendCovidFormRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCovidFormRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCovidFormRequest) ProtoMessage() {}

func (x *SendCovidFormRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCovidFormRequest.ProtoReflect.Descriptor instead.
func (*SendCovidFormRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{38}
}

func (x *SendCovidFormRequest) GetCovidForm() *CovidForm {
	if x != nil {
		return x.CovidForm
	}
	return nil
}

type SendCovidFormResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendCovidFormResponse) Reset() {
	*x = SendCovidFormResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCovidFormResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCovidFormResponse) ProtoMessage() {}

func (x *SendCovidFormResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCovidFormResponse.ProtoReflect.Descriptor instead.
func (*SendCovidFormResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{39}
}

func (x *SendCovidFormResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetLocalTransmissionDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalTransmissionData []*LocalTransmissionData `protobuf:"bytes,1,rep,name=localTransmissionData,proto3" json:"localTransmissionData,omitempty"`
}

func (x *GetLocalTransmissionDataResponse) Reset() {
	*x = GetLocalTransmissionDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalTransmissionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalTransmissionDataResponse) ProtoMessage() {}

func (x *GetLocalTransmissionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalTransmissionDataResponse.ProtoReflect.Descriptor instead.
func (*GetLocalTransmissionDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{40}
}

func (x *GetLocalTransmissionDataResponse) GetLocalTransmissionData() []*LocalTransmissionData {
	if x != nil {
		return x.LocalTransmissionData
	}
	return nil
}

type LocalTransmissionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Province string `protobuf:"bytes,2,opt,name=province,proto3" json:"province,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *LocalTransmissionData) Reset() {
	*x = LocalTransmissionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalTransmissionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalTransmissionData) ProtoMessage() {}

func (x *LocalTransmissionData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalTransmissionData.ProtoReflect.Descriptor instead.
func (*LocalTransmissionData) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{41}
}

func (x *LocalTransmissionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LocalTransmissionData) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *LocalTransmissionData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type ContentCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Sort         int32  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Type         string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ImageURL     string `protobuf:"bytes,5,opt,name=imageURL,proto3" json:"imageURL,omitempty"`
	Snippet      string `protobuf:"bytes,6,opt,name=snippet,proto3" json:"snippet,omitempty"`
	ExternalLink string `protobuf:"bytes,7,opt,name=externalLink,proto3" json:"externalLink,omitempty"`
}

func (x *ContentCard) Reset() {
	*x = ContentCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentCard) ProtoMessage() {}

func (x *ContentCard) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentCard.ProtoReflect.Descriptor instead.
func (*ContentCard) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{42}
}

func (x *ContentCard) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContentCard) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ContentCard) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ContentCard) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContentCard) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *ContentCard) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *ContentCard) GetExternalLink() string {
	if x != nil {
		return x.ExternalLink
	}
	return ""
}

type GetContentCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GetContentCardRequest) Reset() {
	*x = GetContentCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentCardRequest) ProtoMessage() {}

func (x *GetContentCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentCardRequest.ProtoReflect.Descriptor instead.
func (*GetContentCardRequest) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{43}
}

func (x *GetContentCardRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetContentCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentCard []*ContentCard `protobuf:"bytes,1,rep,name=contentCard,proto3" json:"contentCard,omitempty"`
}

func (x *GetContentCardResponse) Reset() {
	*x = GetContentCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContentCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContentCardResponse) ProtoMessage() {}

func (x *GetContentCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContentCardResponse.ProtoReflect.Descriptor instead.
func (*GetContentCardResponse) Descriptor() ([]byte, []int) {
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP(), []int{44}
}

func (x *GetContentCardResponse) GetContentCard() []*ContentCard {
	if x != nil {
		return x.ContentCard
	}
	return nil
}

var File_proto_diagnostic_v1_Diagnostic_proto protoreflect.FileDescriptor

var file_proto_diagnostic_v1_Diagnostic_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x9e, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x07, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x70, 0x74, 0x6f, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x22, 0x9f, 0x01,
	0x0a, 0x0b, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6d, 0x69, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x6d, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x42, 0x0a, 0x0c, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xc2, 0x01, 0x0a,
	0x16, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x67,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x18, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x46, 0x0a, 0x1c,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x61, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x69,
	0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f,
	0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x6d, 0x70, 0x74,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46,
	0x6f, 0x72, 0x52, 0x44, 0x54, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x52, 0x44, 0x54, 0x22, 0x7a, 0x0a, 0x0c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x52, 0x0a, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x6b, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xcf, 0x02, 0x0a, 0x13, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f,
	0x6d, 0x44, 0x65, 0x73, 0x63, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x12,
	0x41, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x22, 0x7f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4f,
	0x62, 0x65, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x62,
	0x65, 0x73, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0xc1, 0x01, 0x0a, 0x0b, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x54,
	0x72, 0x69, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79, 0x6d,
	0x70, 0x74, 0x6f, 0x6d, 0x73, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x74, 0x72, 0x69, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x61, 0x62, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x61, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x22, 0x70, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x07, 0x4c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x6b, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x22, 0xcd, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x6f, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x70, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xcd, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x78, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x78, 0x61, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x78, 0x61, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x98, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x78, 0x61,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x78, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x69, 0x78,
	0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xe0, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61, 0x76, 0x65,
	0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x68, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x6f, 0x48, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x6c, 0x61,
	0x6e, 0x54, 0x6f, 0x48, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xa9, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe2, 0xdf, 0x1f, 0x2e, 0x0a, 0x2a, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x25, 0x2b, 0x2d, 0x5d, 0x2b, 0x40, 0x5b,
	0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b, 0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d,
	0x7b, 0x32, 0x2c, 0x34, 0x7d, 0x24, 0x58, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x27, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58,
	0x01, 0x90, 0x01, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0xe2, 0xdf, 0x1f, 0x04, 0x10, 0x00, 0x18, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58,
	0x01, 0x90, 0x01, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01,
	0x04, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x58, 0x01, 0x90, 0x01, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6d,
	0x70, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79,
	0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58,
	0x01, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x22, 0x8f, 0x04,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x64, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6e, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72,
	0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x4c, 0x61, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x65, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x6f, 0x77, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x77,
	0x54, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x22,
	0xe5, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x6d, 0x70,
	0x74, 0x6f, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x49, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x10, 0x01, 0x22, 0x85, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x13, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe2, 0xdf, 0x1f, 0x2c,
	0x0a, 0x2a, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f, 0x25,
	0x2b, 0x2d, 0x5d, 0x2b, 0x40, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x2d, 0x5d, 0x2b,
	0x2e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x7b, 0x32, 0x2c, 0x34, 0x7d, 0x24, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x54, 0x0a,
	0x14, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x76, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x22, 0x31, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x76, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x69,
	0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x57, 0x0a,
	0x15, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x2b,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x69,
	0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x32, 0xdc, 0x10, 0x0a, 0x11, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x86, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x69, 0x78, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x42, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x2b,
	0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72,
	0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61,
	0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x78, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x78, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x78, 0x61, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x25, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61,
	0x69, 0x6c, 0x2f, 0x73, 0x65, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x0a, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69,
	0x78, 0x61, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x9f,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x2d, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x2f, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x2f, 0x7b, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x7d,
	0x12, 0x89, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x34, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x78,
	0x61, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x29,
	0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x69, 0x78,
	0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x76, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2f, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x01, 0x2a, 0x12, 0x8c, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x35,
	0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x70, 0x72,
	0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x72,
	0x64, 0x2f, 0x7b, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x12, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x63, 0x61, 0x72, 0x64, 0x12,
	0xda, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x12,
	0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5a, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0x5a, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0xa4, 0x02, 0x92, 0x41, 0xa0, 0x02, 0x12,
	0xbc, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x69, 0x78, 0x61, 0x20, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x41, 0x50, 0x49,
	0x22, 0x45, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x78, 0x61, 0x20, 0x54, 0x65, 0x63, 0x68, 0x12, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x69, 0x78,
	0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x40, 0x70, 0x72,
	0x69, 0x78, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x50, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x78, 0x61,
	0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x69,
	0x78, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x2e, 0x74, 0x78, 0x74, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x10,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x32, 0x2e, 0x70, 0x72, 0x69, 0x78, 0x61, 0x2e, 0x61, 0x69,
	0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x25, 0x0a, 0x23, 0x0a, 0x0a, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x15, 0x08, 0x02, 0x1a, 0x0f, 0x58, 0x2d,
	0x50, 0x72, 0x69, 0x78, 0x61, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x65, 0x79, 0x20, 0x02, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_diagnostic_v1_Diagnostic_proto_rawDescOnce sync.Once
	file_proto_diagnostic_v1_Diagnostic_proto_rawDescData = file_proto_diagnostic_v1_Diagnostic_proto_rawDesc
)

func file_proto_diagnostic_v1_Diagnostic_proto_rawDescGZIP() []byte {
	file_proto_diagnostic_v1_Diagnostic_proto_rawDescOnce.Do(func() {
		file_proto_diagnostic_v1_Diagnostic_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_diagnostic_v1_Diagnostic_proto_rawDescData)
	})
	return file_proto_diagnostic_v1_Diagnostic_proto_rawDescData
}

var file_proto_diagnostic_v1_Diagnostic_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_diagnostic_v1_Diagnostic_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_proto_diagnostic_v1_Diagnostic_proto_goTypes = []interface{}{
	(UpdateSourceRequest_Source)(0),          // 0: prixa.diagnostic.v1.UpdateSourceRequest.Source
	(*GetDiagnosisResultRequest)(nil),        // 1: prixa.diagnostic.v1.GetDiagnosisResultRequest
	(*GetDiagnosisResultResponse)(nil),       // 2: prixa.diagnostic.v1.GetDiagnosisResultResponse
	(*PatientData)(nil),                      // 3: prixa.diagnostic.v1.PatientData
	(*SymptomsData)(nil),                     // 4: prixa.diagnostic.v1.SymptomsData
	(*GeoLocation)(nil),                      // 5: prixa.diagnostic.v1.GeoLocation
	(*BotConversationRequest)(nil),           // 6: prixa.diagnostic.v1.BotConversationRequest
	(*ReplyData)(nil),                        // 7: prixa.diagnostic.v1.ReplyData
	(*PreconditionsDataRequest)(nil),         // 8: prixa.diagnostic.v1.PreconditionsDataRequest
	(*PreconditionsDataRequestProp)(nil),     // 9: prixa.diagnostic.v1.PreconditionsDataRequestProp
	(*BotConversationResponse)(nil),          // 10: prixa.diagnostic.v1.BotConversationResponse
	(*ResultData)(nil),                       // 11: prixa.diagnostic.v1.ResultData
	(*MessagesData)(nil),                     // 12: prixa.diagnostic.v1.MessagesData
	(*ActionData)(nil),                       // 13: prixa.diagnostic.v1.ActionData
	(*ValueData)(nil),                        // 14: prixa.diagnostic.v1.ValueData
	(*DiagnosisResultData)(nil),              // 15: prixa.diagnostic.v1.DiagnosisResultData
	(*UserDetailsData)(nil),                  // 16: prixa.diagnostic.v1.UserDetailsData
	(*ProfileData)(nil),                      // 17: prixa.diagnostic.v1.ProfileData
	(*SymptomDesc)(nil),                      // 18: prixa.diagnostic.v1.SymptomDesc
	(*PotentialDisease)(nil),                 // 19: prixa.diagnostic.v1.PotentialDisease
	(*TriageResult)(nil),                     // 20: prixa.diagnostic.v1.TriageResult
	(*LabInfo)(nil),                          // 21: prixa.diagnostic.v1.LabInfo
	(*PreconditionsData)(nil),                // 22: prixa.diagnostic.v1.PreconditionsData
	(*LogEvents)(nil),                        // 23: prixa.diagnostic.v1.LogEvents
	(*CreatePrixaSessionRequest)(nil),        // 24: prixa.diagnostic.v1.CreatePrixaSessionRequest
	(*CreatePrixaSessionResponse)(nil),       // 25: prixa.diagnostic.v1.CreatePrixaSessionResponse
	(*UserData)(nil),                         // 26: prixa.diagnostic.v1.UserData
	(*InsuranceStatus)(nil),                  // 27: prixa.diagnostic.v1.InsuranceStatus
	(*SendEmailRequest)(nil),                 // 28: prixa.diagnostic.v1.SendEmailRequest
	(*SendEmailResponse)(nil),                // 29: prixa.diagnostic.v1.SendEmailResponse
	(*SendSurveyRequest)(nil),                // 30: prixa.diagnostic.v1.SendSurveyRequest
	(*FeedbackContentResponse)(nil),          // 31: prixa.diagnostic.v1.FeedbackContentResponse
	(*SendFeedbackRequest)(nil),              // 32: prixa.diagnostic.v1.SendFeedbackRequest
	(*SendFeedbackResponse)(nil),             // 33: prixa.diagnostic.v1.SendFeedbackResponse
	(*GetDiseaseArticleRequest)(nil),         // 34: prixa.diagnostic.v1.GetDiseaseArticleRequest
	(*GetDiseaseArticleResponse)(nil),        // 35: prixa.diagnostic.v1.GetDiseaseArticleResponse
	(*GetDiagnosticStatisticsResponse)(nil),  // 36: prixa.diagnostic.v1.GetDiagnosticStatisticsResponse
	(*UpdateSourceRequest)(nil),              // 37: prixa.diagnostic.v1.UpdateSourceRequest
	(*CovidForm)(nil),                        // 38: prixa.diagnostic.v1.CovidForm
	(*SendCovidFormRequest)(nil),             // 39: prixa.diagnostic.v1.SendCovidFormRequest
	(*SendCovidFormResponse)(nil),            // 40: prixa.diagnostic.v1.SendCovidFormResponse
	(*GetLocalTransmissionDataResponse)(nil), // 41: prixa.diagnostic.v1.GetLocalTransmissionDataResponse
	(*LocalTransmissionData)(nil),            // 42: prixa.diagnostic.v1.LocalTransmissionData
	(*ContentCard)(nil),                      // 43: prixa.diagnostic.v1.ContentCard
	(*GetContentCardRequest)(nil),            // 44: prixa.diagnostic.v1.GetContentCardRequest
	(*GetContentCardResponse)(nil),           // 45: prixa.diagnostic.v1.GetContentCardResponse
	(*timestamp.Timestamp)(nil),              // 46: google.protobuf.Timestamp
	(*empty.Empty)(nil),                      // 47: google.protobuf.Empty
}
var file_proto_diagnostic_v1_Diagnostic_proto_depIdxs = []int32{
	3,  // 0: prixa.diagnostic.v1.GetDiagnosisResultResponse.patient:type_name -> prixa.diagnostic.v1.PatientData
	4,  // 1: prixa.diagnostic.v1.GetDiagnosisResultResponse.symptom:type_name -> prixa.diagnostic.v1.SymptomsData
	4,  // 2: prixa.diagnostic.v1.GetDiagnosisResultResponse.associatedSymptoms:type_name -> prixa.diagnostic.v1.SymptomsData
	7,  // 3: prixa.diagnostic.v1.BotConversationRequest.reply:type_name -> prixa.diagnostic.v1.ReplyData
	5,  // 4: prixa.diagnostic.v1.BotConversationRequest.geoLocation:type_name -> prixa.diagnostic.v1.GeoLocation
	22, // 5: prixa.diagnostic.v1.ReplyData.preconditions:type_name -> prixa.diagnostic.v1.PreconditionsData
	9,  // 6: prixa.diagnostic.v1.PreconditionsDataRequest.Data:type_name -> prixa.diagnostic.v1.PreconditionsDataRequestProp
	11, // 7: prixa.diagnostic.v1.BotConversationResponse.result:type_name -> prixa.diagnostic.v1.ResultData
	23, // 8: prixa.diagnostic.v1.BotConversationResponse.logEvents:type_name -> prixa.diagnostic.v1.LogEvents
	12, // 9: prixa.diagnostic.v1.ResultData.messages:type_name -> prixa.diagnostic.v1.MessagesData
	13, // 10: prixa.diagnostic.v1.ResultData.actions:type_name -> prixa.diagnostic.v1.ActionData
	22, // 11: prixa.diagnostic.v1.ResultData.preconditions:type_name -> prixa.diagnostic.v1.PreconditionsData
	14, // 12: prixa.diagnostic.v1.ActionData.value:type_name -> prixa.diagnostic.v1.ValueData
	15, // 13: prixa.diagnostic.v1.ActionData.diagnosisResult:type_name -> prixa.diagnostic.v1.DiagnosisResultData
	26, // 14: prixa.diagnostic.v1.DiagnosisResultData.user:type_name -> prixa.diagnostic.v1.UserData
	16, // 15: prixa.diagnostic.v1.DiagnosisResultData.userDetails:type_name -> prixa.diagnostic.v1.UserDetailsData
	17, // 16: prixa.diagnostic.v1.DiagnosisResultData.profiles:type_name -> prixa.diagnostic.v1.ProfileData
	18, // 17: prixa.diagnostic.v1.DiagnosisResultData.symptoms:type_name -> prixa.diagnostic.v1.SymptomDesc
	19, // 18: prixa.diagnostic.v1.DiagnosisResultData.diseases:type_name -> prixa.diagnostic.v1.PotentialDisease
	20, // 19: prixa.diagnostic.v1.PotentialDisease.triage:type_name -> prixa.diagnostic.v1.TriageResult
	21, // 20: prixa.diagnostic.v1.PotentialDisease.labs:type_name -> prixa.diagnostic.v1.LabInfo
	26, // 21: prixa.diagnostic.v1.CreatePrixaSessionRequest.userData:type_name -> prixa.diagnostic.v1.UserData
	26, // 22: prixa.diagnostic.v1.CreatePrixaSessionResponse.userData:type_name -> prixa.diagnostic.v1.UserData
	27, // 23: prixa.diagnostic.v1.UserData.insurance:type_name -> prixa.diagnostic.v1.InsuranceStatus
	0,  // 24: prixa.diagnostic.v1.UpdateSourceRequest.source:type_name -> prixa.diagnostic.v1.UpdateSourceRequest.Source
	46, // 25: prixa.diagnostic.v1.CovidForm.timestamp:type_name -> google.protobuf.Timestamp
	38, // 26: prixa.diagnostic.v1.SendCovidFormRequest.covidForm:type_name -> prixa.diagnostic.v1.CovidForm
	42, // 27: prixa.diagnostic.v1.GetLocalTransmissionDataResponse.localTransmissionData:type_name -> prixa.diagnostic.v1.LocalTransmissionData
	43, // 28: prixa.diagnostic.v1.GetContentCardResponse.contentCard:type_name -> prixa.diagnostic.v1.ContentCard
	6,  // 29: prixa.diagnostic.v1.DiagnosticService.BotConversation:input_type -> prixa.diagnostic.v1.BotConversationRequest
	6,  // 30: prixa.diagnostic.v1.DiagnosticService.BotConversationV2:input_type -> prixa.diagnostic.v1.BotConversationRequest
	24, // 31: prixa.diagnostic.v1.DiagnosticService.CreatePrixaSession:input_type -> prixa.diagnostic.v1.CreatePrixaSessionRequest
	28, // 32: prixa.diagnostic.v1.DiagnosticService.SendEmail:input_type -> prixa.diagnostic.v1.SendEmailRequest
	30, // 33: prixa.diagnostic.v1.DiagnosticService.SendSurvey:input_type -> prixa.diagnostic.v1.SendSurveyRequest
	47, // 34: prixa.diagnostic.v1.DiagnosticService.GetFeedbackContent:input_type -> google.protobuf.Empty
	32, // 35: prixa.diagnostic.v1.DiagnosticService.SendFeedback:input_type -> prixa.diagnostic.v1.SendFeedbackRequest
	34, // 36: prixa.diagnostic.v1.DiagnosticService.GetDiseaseArticle:input_type -> prixa.diagnostic.v1.GetDiseaseArticleRequest
	47, // 37: prixa.diagnostic.v1.DiagnosticService.GetDiagnosticStatistics:input_type -> google.protobuf.Empty
	39, // 38: prixa.diagnostic.v1.DiagnosticService.SendCovidForm:input_type -> prixa.diagnostic.v1.SendCovidFormRequest
	47, // 39: prixa.diagnostic.v1.DiagnosticService.GetLocalTransmissionData:input_type -> google.protobuf.Empty
	44, // 40: prixa.diagnostic.v1.DiagnosticService.GetContentCard:input_type -> prixa.diagnostic.v1.GetContentCardRequest
	47, // 41: prixa.diagnostic.v1.DiagnosticService.GetAllContentCard:input_type -> google.protobuf.Empty
	1,  // 42: prixa.diagnostic.v1.DiagnosticService.GetDiagnosisResult:input_type -> prixa.diagnostic.v1.GetDiagnosisResultRequest
	37, // 43: prixa.diagnostic.v1.DiagnosticService.UpdateDiagnosticData:input_type -> prixa.diagnostic.v1.UpdateSourceRequest
	10, // 44: prixa.diagnostic.v1.DiagnosticService.BotConversation:output_type -> prixa.diagnostic.v1.BotConversationResponse
	10, // 45: prixa.diagnostic.v1.DiagnosticService.BotConversationV2:output_type -> prixa.diagnostic.v1.BotConversationResponse
	25, // 46: prixa.diagnostic.v1.DiagnosticService.CreatePrixaSession:output_type -> prixa.diagnostic.v1.CreatePrixaSessionResponse
	29, // 47: prixa.diagnostic.v1.DiagnosticService.SendEmail:output_type -> prixa.diagnostic.v1.SendEmailResponse
	47, // 48: prixa.diagnostic.v1.DiagnosticService.SendSurvey:output_type -> google.protobuf.Empty
	31, // 49: prixa.diagnostic.v1.DiagnosticService.GetFeedbackContent:output_type -> prixa.diagnostic.v1.FeedbackContentResponse
	33, // 50: prixa.diagnostic.v1.DiagnosticService.SendFeedback:output_type -> prixa.diagnostic.v1.SendFeedbackResponse
	35, // 51: prixa.diagnostic.v1.DiagnosticService.GetDiseaseArticle:output_type -> prixa.diagnostic.v1.GetDiseaseArticleResponse
	36, // 52: prixa.diagnostic.v1.DiagnosticService.GetDiagnosticStatistics:output_type -> prixa.diagnostic.v1.GetDiagnosticStatisticsResponse
	40, // 53: prixa.diagnostic.v1.DiagnosticService.SendCovidForm:output_type -> prixa.diagnostic.v1.SendCovidFormResponse
	41, // 54: prixa.diagnostic.v1.DiagnosticService.GetLocalTransmissionData:output_type -> prixa.diagnostic.v1.GetLocalTransmissionDataResponse
	45, // 55: prixa.diagnostic.v1.DiagnosticService.GetContentCard:output_type -> prixa.diagnostic.v1.GetContentCardResponse
	45, // 56: prixa.diagnostic.v1.DiagnosticService.GetAllContentCard:output_type -> prixa.diagnostic.v1.GetContentCardResponse
	2,  // 57: prixa.diagnostic.v1.DiagnosticService.GetDiagnosisResult:output_type -> prixa.diagnostic.v1.GetDiagnosisResultResponse
	47, // 58: prixa.diagnostic.v1.DiagnosticService.UpdateDiagnosticData:output_type -> google.protobuf.Empty
	44, // [44:59] is the sub-list for method output_type
	29, // [29:44] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_proto_diagnostic_v1_Diagnostic_proto_init() }
func file_proto_diagnostic_v1_Diagnostic_proto_init() {
	if File_proto_diagnostic_v1_Diagnostic_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymptomsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreconditionsDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreconditionsDataRequestProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosisResultData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDetailsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymptomDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotentialDisease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreconditionsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrixaSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePrixaSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsuranceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSurveyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosticStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CovidForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCovidFormRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCovidFormResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalTransmissionDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalTransmissionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_diagnostic_v1_Diagnostic_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContentCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_diagnostic_v1_Diagnostic_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_diagnostic_v1_Diagnostic_proto_goTypes,
		DependencyIndexes: file_proto_diagnostic_v1_Diagnostic_proto_depIdxs,
		EnumInfos:         file_proto_diagnostic_v1_Diagnostic_proto_enumTypes,
		MessageInfos:      file_proto_diagnostic_v1_Diagnostic_proto_msgTypes,
	}.Build()
	File_proto_diagnostic_v1_Diagnostic_proto = out.File
	file_proto_diagnostic_v1_Diagnostic_proto_rawDesc = nil
	file_proto_diagnostic_v1_Diagnostic_proto_goTypes = nil
	file_proto_diagnostic_v1_Diagnostic_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiagnosticServiceClient is the client API for DiagnosticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiagnosticServiceClient interface {
	BotConversation(ctx context.Context, in *BotConversationRequest, opts ...grpc.CallOption) (*BotConversationResponse, error)
	BotConversationV2(ctx context.Context, in *BotConversationRequest, opts ...grpc.CallOption) (*BotConversationResponse, error)
	CreatePrixaSession(ctx context.Context, in *CreatePrixaSessionRequest, opts ...grpc.CallOption) (*CreatePrixaSessionResponse, error)
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	SendSurvey(ctx context.Context, in *SendSurveyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetFeedbackContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FeedbackContentResponse, error)
	SendFeedback(ctx context.Context, in *SendFeedbackRequest, opts ...grpc.CallOption) (*SendFeedbackResponse, error)
	GetDiseaseArticle(ctx context.Context, in *GetDiseaseArticleRequest, opts ...grpc.CallOption) (*GetDiseaseArticleResponse, error)
	GetDiagnosticStatistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDiagnosticStatisticsResponse, error)
	SendCovidForm(ctx context.Context, in *SendCovidFormRequest, opts ...grpc.CallOption) (*SendCovidFormResponse, error)
	GetLocalTransmissionData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLocalTransmissionDataResponse, error)
	GetContentCard(ctx context.Context, in *GetContentCardRequest, opts ...grpc.CallOption) (*GetContentCardResponse, error)
	GetAllContentCard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetContentCardResponse, error)
	GetDiagnosisResult(ctx context.Context, in *GetDiagnosisResultRequest, opts ...grpc.CallOption) (*GetDiagnosisResultResponse, error)
	// Internal GRPC API, DO NOT EXPOSE
	UpdateDiagnosticData(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type diagnosticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosticServiceClient(cc grpc.ClientConnInterface) DiagnosticServiceClient {
	return &diagnosticServiceClient{cc}
}

func (c *diagnosticServiceClient) BotConversation(ctx context.Context, in *BotConversationRequest, opts ...grpc.CallOption) (*BotConversationResponse, error) {
	out := new(BotConversationResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/BotConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) BotConversationV2(ctx context.Context, in *BotConversationRequest, opts ...grpc.CallOption) (*BotConversationResponse, error) {
	out := new(BotConversationResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/BotConversationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) CreatePrixaSession(ctx context.Context, in *CreatePrixaSessionRequest, opts ...grpc.CallOption) (*CreatePrixaSessionResponse, error) {
	out := new(CreatePrixaSessionResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/CreatePrixaSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) SendSurvey(ctx context.Context, in *SendSurveyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/SendSurvey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetFeedbackContent(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FeedbackContentResponse, error) {
	out := new(FeedbackContentResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetFeedbackContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) SendFeedback(ctx context.Context, in *SendFeedbackRequest, opts ...grpc.CallOption) (*SendFeedbackResponse, error) {
	out := new(SendFeedbackResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/SendFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetDiseaseArticle(ctx context.Context, in *GetDiseaseArticleRequest, opts ...grpc.CallOption) (*GetDiseaseArticleResponse, error) {
	out := new(GetDiseaseArticleResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetDiseaseArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetDiagnosticStatistics(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDiagnosticStatisticsResponse, error) {
	out := new(GetDiagnosticStatisticsResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetDiagnosticStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) SendCovidForm(ctx context.Context, in *SendCovidFormRequest, opts ...grpc.CallOption) (*SendCovidFormResponse, error) {
	out := new(SendCovidFormResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/SendCovidForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetLocalTransmissionData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLocalTransmissionDataResponse, error) {
	out := new(GetLocalTransmissionDataResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetLocalTransmissionData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetContentCard(ctx context.Context, in *GetContentCardRequest, opts ...grpc.CallOption) (*GetContentCardResponse, error) {
	out := new(GetContentCardResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetContentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetAllContentCard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetContentCardResponse, error) {
	out := new(GetContentCardResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetAllContentCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) GetDiagnosisResult(ctx context.Context, in *GetDiagnosisResultRequest, opts ...grpc.CallOption) (*GetDiagnosisResultResponse, error) {
	out := new(GetDiagnosisResultResponse)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/GetDiagnosisResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosticServiceClient) UpdateDiagnosticData(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/prixa.diagnostic.v1.DiagnosticService/UpdateDiagnosticData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosticServiceServer is the server API for DiagnosticService service.
type DiagnosticServiceServer interface {
	BotConversation(context.Context, *BotConversationRequest) (*BotConversationResponse, error)
	BotConversationV2(context.Context, *BotConversationRequest) (*BotConversationResponse, error)
	CreatePrixaSession(context.Context, *CreatePrixaSessionRequest) (*CreatePrixaSessionResponse, error)
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	SendSurvey(context.Context, *SendSurveyRequest) (*empty.Empty, error)
	GetFeedbackContent(context.Context, *empty.Empty) (*FeedbackContentResponse, error)
	SendFeedback(context.Context, *SendFeedbackRequest) (*SendFeedbackResponse, error)
	GetDiseaseArticle(context.Context, *GetDiseaseArticleRequest) (*GetDiseaseArticleResponse, error)
	GetDiagnosticStatistics(context.Context, *empty.Empty) (*GetDiagnosticStatisticsResponse, error)
	SendCovidForm(context.Context, *SendCovidFormRequest) (*SendCovidFormResponse, error)
	GetLocalTransmissionData(context.Context, *empty.Empty) (*GetLocalTransmissionDataResponse, error)
	GetContentCard(context.Context, *GetContentCardRequest) (*GetContentCardResponse, error)
	GetAllContentCard(context.Context, *empty.Empty) (*GetContentCardResponse, error)
	GetDiagnosisResult(context.Context, *GetDiagnosisResultRequest) (*GetDiagnosisResultResponse, error)
	// Internal GRPC API, DO NOT EXPOSE
	UpdateDiagnosticData(context.Context, *UpdateSourceRequest) (*empty.Empty, error)
}

// UnimplementedDiagnosticServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiagnosticServiceServer struct {
}

func (*UnimplementedDiagnosticServiceServer) BotConversation(context.Context, *BotConversationRequest) (*BotConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotConversation not implemented")
}
func (*UnimplementedDiagnosticServiceServer) BotConversationV2(context.Context, *BotConversationRequest) (*BotConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotConversationV2 not implemented")
}
func (*UnimplementedDiagnosticServiceServer) CreatePrixaSession(context.Context, *CreatePrixaSessionRequest) (*CreatePrixaSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrixaSession not implemented")
}
func (*UnimplementedDiagnosticServiceServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (*UnimplementedDiagnosticServiceServer) SendSurvey(context.Context, *SendSurveyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSurvey not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetFeedbackContent(context.Context, *empty.Empty) (*FeedbackContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedbackContent not implemented")
}
func (*UnimplementedDiagnosticServiceServer) SendFeedback(context.Context, *SendFeedbackRequest) (*SendFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFeedback not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetDiseaseArticle(context.Context, *GetDiseaseArticleRequest) (*GetDiseaseArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiseaseArticle not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetDiagnosticStatistics(context.Context, *empty.Empty) (*GetDiagnosticStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosticStatistics not implemented")
}
func (*UnimplementedDiagnosticServiceServer) SendCovidForm(context.Context, *SendCovidFormRequest) (*SendCovidFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCovidForm not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetLocalTransmissionData(context.Context, *empty.Empty) (*GetLocalTransmissionDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalTransmissionData not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetContentCard(context.Context, *GetContentCardRequest) (*GetContentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContentCard not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetAllContentCard(context.Context, *empty.Empty) (*GetContentCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContentCard not implemented")
}
func (*UnimplementedDiagnosticServiceServer) GetDiagnosisResult(context.Context, *GetDiagnosisResultRequest) (*GetDiagnosisResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosisResult not implemented")
}
func (*UnimplementedDiagnosticServiceServer) UpdateDiagnosticData(context.Context, *UpdateSourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiagnosticData not implemented")
}

func RegisterDiagnosticServiceServer(s *grpc.Server, srv DiagnosticServiceServer) {
	s.RegisterService(&_DiagnosticService_serviceDesc, srv)
}

func _DiagnosticService_BotConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).BotConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/BotConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).BotConversation(ctx, req.(*BotConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_BotConversationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).BotConversationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/BotConversationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).BotConversationV2(ctx, req.(*BotConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_CreatePrixaSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrixaSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).CreatePrixaSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/CreatePrixaSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).CreatePrixaSession(ctx, req.(*CreatePrixaSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_SendSurvey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSurveyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).SendSurvey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/SendSurvey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).SendSurvey(ctx, req.(*SendSurveyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetFeedbackContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetFeedbackContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetFeedbackContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetFeedbackContent(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_SendFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).SendFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/SendFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).SendFeedback(ctx, req.(*SendFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetDiseaseArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiseaseArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetDiseaseArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetDiseaseArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetDiseaseArticle(ctx, req.(*GetDiseaseArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetDiagnosticStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetDiagnosticStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetDiagnosticStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetDiagnosticStatistics(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_SendCovidForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCovidFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).SendCovidForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/SendCovidForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).SendCovidForm(ctx, req.(*SendCovidFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetLocalTransmissionData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetLocalTransmissionData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetLocalTransmissionData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetLocalTransmissionData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetContentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetContentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetContentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetContentCard(ctx, req.(*GetContentCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetAllContentCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetAllContentCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetAllContentCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetAllContentCard(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_GetDiagnosisResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosisResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).GetDiagnosisResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/GetDiagnosisResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).GetDiagnosisResult(ctx, req.(*GetDiagnosisResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosticService_UpdateDiagnosticData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosticServiceServer).UpdateDiagnosticData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prixa.diagnostic.v1.DiagnosticService/UpdateDiagnosticData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosticServiceServer).UpdateDiagnosticData(ctx, req.(*UpdateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnosticService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "prixa.diagnostic.v1.DiagnosticService",
	HandlerType: (*DiagnosticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BotConversation",
			Handler:    _DiagnosticService_BotConversation_Handler,
		},
		{
			MethodName: "BotConversationV2",
			Handler:    _DiagnosticService_BotConversationV2_Handler,
		},
		{
			MethodName: "CreatePrixaSession",
			Handler:    _DiagnosticService_CreatePrixaSession_Handler,
		},
		{
			MethodName: "SendEmail",
			Handler:    _DiagnosticService_SendEmail_Handler,
		},
		{
			MethodName: "SendSurvey",
			Handler:    _DiagnosticService_SendSurvey_Handler,
		},
		{
			MethodName: "GetFeedbackContent",
			Handler:    _DiagnosticService_GetFeedbackContent_Handler,
		},
		{
			MethodName: "SendFeedback",
			Handler:    _DiagnosticService_SendFeedback_Handler,
		},
		{
			MethodName: "GetDiseaseArticle",
			Handler:    _DiagnosticService_GetDiseaseArticle_Handler,
		},
		{
			MethodName: "GetDiagnosticStatistics",
			Handler:    _DiagnosticService_GetDiagnosticStatistics_Handler,
		},
		{
			MethodName: "SendCovidForm",
			Handler:    _DiagnosticService_SendCovidForm_Handler,
		},
		{
			MethodName: "GetLocalTransmissionData",
			Handler:    _DiagnosticService_GetLocalTransmissionData_Handler,
		},
		{
			MethodName: "GetContentCard",
			Handler:    _DiagnosticService_GetContentCard_Handler,
		},
		{
			MethodName: "GetAllContentCard",
			Handler:    _DiagnosticService_GetAllContentCard_Handler,
		},
		{
			MethodName: "GetDiagnosisResult",
			Handler:    _DiagnosticService_GetDiagnosisResult_Handler,
		},
		{
			MethodName: "UpdateDiagnosticData",
			Handler:    _DiagnosticService_UpdateDiagnosticData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/diagnostic/v1/Diagnostic.proto",
}
