syntax = "proto3";

package prixa.diagnostic.v1;
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

option go_package = "github.com/prixa-ai/prixa-proto/proto/diagnostic/v1";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    host: "engine2.prixa.ai";
	info: {
		title: "Prixa Diagnostic Service API";
		version: "1.0";
		contact: {
			name: "Prixa Tech";
			url: "https://github.com/prixa-ai/prixa-proto";
			email: "tech@prixa.com";
		};
		license: {
			name: "Prixa License";
			url: "https://github.com/prixa-ai/prixa-proto/blob/master/LICENSE.txt";
		};
    };
	schemes: HTTP;
	schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-Prixa-API-Key";
            }
        }
    }
};

service DiagnosticService {
    rpc BotConversation (BotConversationRequest) returns (BotConversationResponse) {
        option (google.api.http) = {
            post: "/api/v1/prixa"
            body: "*"
        };
    }
    rpc BotConversationV2 (BotConversationRequest) returns (BotConversationResponse) {
        option (google.api.http) = {
            post: "/api/v2/prixa"
            body: "*"
            additional_bindings {
                post: "/api/v2/diagnosis"
                body: "*"
            }
        };
    }
    rpc CreatePrixaSession (CreatePrixaSessionRequest) returns (CreatePrixaSessionResponse) {
        option (google.api.http) = {
            post: "/api/v1/prixa/user"
            body: "*"
        };
    }
    rpc SendEmail (SendEmailRequest) returns (SendEmailResponse) {
        option (google.api.http) = {
            post: "/api/v1/conversation/mail/send"
            body: "*"
        };
    }
    rpc SendSurvey (SendSurveyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/prixa/survey"
            body: "*"
        };
    }
    rpc GetFeedbackContent (google.protobuf.Empty) returns (FeedbackContentResponse) {
        option (google.api.http) = {
            get: "/api/v1/prixa/feedback"
        };
    }
    rpc SendFeedback (SendFeedbackRequest) returns (SendFeedbackResponse) {
        option (google.api.http) = {
            post: "/api/v1/prixa/feedback"
            body: "*"
        };
    }
    rpc GetDiseaseArticle (GetDiseaseArticleRequest) returns (GetDiseaseArticleResponse) {
        option (google.api.http) = {
            get: "/api/v1/disease/article/{diseaseID}"
        };
    }

    rpc GetDiagnosticStatistics (google.protobuf.Empty) returns (GetDiagnosticStatisticsResponse) {
        option (google.api.http) = {
            get: "/api/v1/prixa/statistics"
        };
    }

    rpc SendCovidForm (SendCovidFormRequest) returns (SendCovidFormResponse) {
        option (google.api.http) = {
            post: "/api/v1/prixa/covidform"
            body: "*"
        };
    }

    rpc GetLocalTransmissionData (google.protobuf.Empty) returns (GetLocalTransmissionDataResponse) {
        option (google.api.http) = {
            get: "/api/v1/localtransmission"
        };
    }

    rpc GetContentCard (GetContentCardRequest) returns (GetContentCardResponse) {
        option (google.api.http) = {
            get: "/api/v1/contentcard/{type}"
        };
    }

    rpc GetAllContentCard (google.protobuf.Empty) returns (GetContentCardResponse) {
        option (google.api.http) = {
            get: "/api/v1/contentcard"
        };
    }

    rpc GetDiagnosisResult (GetDiagnosisResultRequest) returns (GetDiagnosisResultResponse) {
        option (google.api.http) = {
            get: "/api/v1/diagnosis/{diagnosticSessionID}/validate"
            additional_bindings {
                get: "/api/v1/prognosis/{diagnosticSessionID}"
            }
        };
    }

    // Internal GRPC API, DO NOT EXPOSE
    rpc UpdateDiagnosticData (UpdateSourceRequest) returns (google.protobuf.Empty) {}
}

message GetDiagnosisResultRequest {
    string diagnosticSessionID = 1;
}

message GetDiagnosisResultResponse {
    string message = 1;
    PatientData patient = 2;
    repeated string diseases = 3;
    SymptomsData symptom = 4;
    repeated SymptomsData associatedSymptoms = 5;
}

message PatientData {
    string gender = 1;
    float weight = 2;
    float height = 3;
    int32 age = 4;
    string bmi = 5;
    repeated string preconditions = 6;
}

message SymptomsData {
    string name = 1;
    repeated string properties = 2;
}

message GeoLocation {
    float latitude = 1;
    float longitude = 2;
}

message BotConversationRequest {
    string sessionId = 1;
    ReplyData reply = 2;
    GeoLocation geoLocation = 3;
    string uid = 4;
}

message ReplyData {
    string tag = 1;
    string type = 2;
    string value = 3;
    repeated PreconditionsData preconditions = 4;
}

message PreconditionsDataRequest {
    repeated PreconditionsDataRequestProp Data = 1;
}

message PreconditionsDataRequestProp {
    string id = 1;
    string values = 2;
}

message BotConversationResponse {
    string sessionId = 1;
    ResultData result = 2;
    float progressBarPercentage = 3;
    repeated LogEvents logEvents = 4;
}

message ResultData {
    MessagesData messages = 1;
    ActionData actions = 2;
    repeated PreconditionsData preconditions = 3;
    string currentState = 4;
    string symptomID = 5;
    bool isValidForRDT = 6;
}

message MessagesData {
    string value = 1;
    string explanation = 2;
    string media = 3;
    string sourceURL = 4;
}

message ActionData {
    string type = 1;
    repeated ValueData value = 2;
    DiagnosisResultData diagnosisResult = 3;
}

message ValueData {
    string label = 1;
    string value = 2;
    string tag = 3;
    string description = 4;
}

message DiagnosisResultData {
    UserData user = 1;
    UserDetailsData userDetails = 2;
    repeated ProfileData profiles = 3;
    repeated SymptomDesc symptoms = 4;
    repeated PotentialDisease diseases = 5;
}

message UserDetailsData {
    int32 ageYear = 1;
    int32 ageMonth = 2;
    string firstname = 3;
    bool isObese = 4;
}

message ProfileData {
    string id = 1;
    string name = 2;
    string nameIndo = 3;
    string description = 4;
    string type = 5;
    int32 order = 6;
}

message SymptomDesc {
    string symptomID = 1;
    string symptomName = 2;
    repeated string propNames = 3;
    bool chief = 4;
    repeated string symptomsTriage = 5;
    string answer = 6;
}

message PotentialDisease {
    string id = 1;
    string name = 2;
    string description = 3;
    string likeliness = 4;
    float score = 5;
    string url = 6;
    TriageResult triage = 7;
    repeated LabInfo labs = 8;
    string prognosis = 9;
}

message TriageResult{
    string id = 1;
    string name = 2;
    string nameIndo = 3;
    string description = 4;
}

message LabInfo{
    string id = 1;
    string name = 2;
    string sku = 3;
    repeated string diseases = 4;
}

message PreconditionsData {
    string id = 1;
    string type = 2;
    string nameIndo = 3;
    string preconditionsDescription = 4;
    string preconditionsDescriptionCopy = 5;
    int64 ageMonth = 6;
    int64 ageYear = 7;
    float weight = 8;
    float height = 9;
    string name = 10;
}

message LogEvents {
    string answer = 1;
    string applicationId = 2;
    string partnerId = 3;
    string prixaSessionId = 4;
    string prixaUserId = 5;
    string question = 6;
}

message CreatePrixaSessionRequest {
    string partnerId = 1;
    string partnerAppId = 2;
    UserData userData = 3;
}

message CreatePrixaSessionResponse {
    string sessionId = 1;
    UserData userData = 2;
}

message UserData {
    string id = 1;
    string fullname = 2;
    string gender = 3;
    string birthdate = 4;
    float weight = 5;
    float height = 6;
    InsuranceStatus insurance = 7;
}

message InsuranceStatus {
    bool haveInsurance = 1;
    bool planToHaveInsurance = 2;
}

message SendEmailRequest {
    string email = 1 [(validator.field) = {string_not_empty: true, regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}]; 
    string sessionId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string username = 3 [(validator.field) = {string_not_empty: true}];
}

message SendEmailResponse {
    string message = 1 [(validator.field) = {string_not_empty: true}];
}

message SendSurveyRequest {
    string applicationId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string feedback = 2;
    string partnerId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    int32 rating = 4  [(validator.field) = {int_gt: 0, int_lt: 5}];
    string sessionId = 5 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string userId = 6;
}

message FeedbackContentResponse {
    string question = 1 [(validator.field) = {string_not_empty: true}];
    string instruction = 2 [(validator.field) = {string_not_empty: true}];
    repeated string choices = 3;
}

message SendFeedbackRequest{
    string userId = 1;
    string partnerId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string applicationId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string sessionId = 4 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string symptomId = 5;
    string question = 6 [(validator.field) = {string_not_empty: true}];
    repeated string feedbacks = 7;
    string detail = 8;
}

message SendFeedbackResponse {
    bool success = 1;
}

message GetDiseaseArticleRequest {
    string diseaseID = 1;
}

message GetDiseaseArticleResponse {
    string id = 1;
    string diseaseName = 2;
    string diseaseNameIndo = 3;
    string author = 4;
    string checkedBy = 5;
    string overview = 6;
    string advice = 7;
    string nonMedicalTreatment = 8;
    string medicalTreatment = 9;
    string supportingLabs = 10;
    string seeDoctor = 11;
    string howToPrevent = 12;
    string prevention = 13;
    string reference = 14;
    repeated string relatedSymptom = 15;
}

message GetDiagnosticStatisticsResponse {
    string symptomsCount = 1;
    string diseaseCount = 2;
    string differentialsCount = 3;
    string articlesCount = 4;
    string profilesCount = 5;
    string typesCount = 6;
    string propertiesCount = 7;
    string characteristicsCount = 8;
}

message UpdateSourceRequest {
    string url = 1;
    enum Source {
        AIRTABLE = 0;
        ELASTICSEARCH = 1;
    }
    Source source = 2;
}

message CovidForm {
    string partnerID = 1 [(validator.field) = {string_not_empty: true}];
    string appID = 2 [(validator.field) = {string_not_empty: true}];
    string diagnosticSessionID = 3 [(validator.field) = {string_not_empty: true}];
    string name = 4 [(validator.field) = {string_not_empty: true}];
    string phone = 5 [(validator.field) = {string_not_empty: true}];
    string email = 6 [(validator.field) = {regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}];
    string city = 7 [(validator.field) = {string_not_empty: true}];
    string province = 8 [(validator.field) = {string_not_empty: true}];
    google.protobuf.Timestamp timestamp = 9;
}

message SendCovidFormRequest {
    CovidForm covidForm = 1;
}

message SendCovidFormResponse {
    string message = 1;
}

message GetLocalTransmissionDataResponse {
    repeated LocalTransmissionData localTransmissionData = 1;
}

message LocalTransmissionData {
    string id = 1;
    string province = 2;
    string city = 3;
}

message ContentCard {
    string id = 1;
    string title = 2;
    int32 sort = 3;
    string type = 4;
    string imageURL = 5;
    string snippet = 6;
    string externalLink = 7;
}

message GetContentCardRequest {
    string type = 1;
}

message GetContentCardResponse {
    repeated ContentCard contentCard = 1;
}