syntax = "proto3";

package prixa.user.v1;
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "proto/diagnostic/v1/Diagnostic.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    host: "engine2.prixa.ai";
    info: {
        title: "Prixa User Service API";
        version: "1.0";
        contact: {
            name: "Prixa Tech";
            url: "https://github.com/prixa-ai/prixa-proto";
            email: "tech@prixa.com";
        };
        license: {
            name: "Prixa License";
            url: "https://github.com/prixa-ai/prixa-proto/blob/master/LICENSE.txt";
        };
    };
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-Prixa-API-Key";
            }
        }
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }
    security: {
        security_requirement: {
            key: "ApiKeyAuth";
            value: {}
        }
    }
};

service UserService {
    // User login given email and password
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/v2/user/login"
            body: "*"
        };
    }

    // Get user consent information
    rpc Consent (google.protobuf.Empty) returns (ConsentResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/consent"
        };
    }

    // New user registration
    rpc Register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/v2/user/register"
            body: "*"
        };
    }

    // Get oauth google url
    rpc OauthGoogle (google.protobuf.Empty) returns (OauthGoogleURL) {
        option (google.api.http) = {
            get: "/api/v1/user/oauth/google"
        };
    }

    // Oauth google callback
    rpc CallbackOauthGoogle (CallbackGoogleRequest) returns (LoginResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/oauth/google/callback"
        };
    }

    // Resend register email verification
    rpc ResendEmailVerification (google.protobuf.Empty) returns (ResendEmailVerificationResponse) {
        option (google.api.http) = {
            get: "/api/v2/user/resend-email"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // Verify user registration
    rpc VerifyRegister (VerifyRegisterRequest) returns (VerifyRegisterResponse) {
        option (google.api.http) = {
            post: "/api/v2/user/register/{registerToken}/verify"
            body: "*"
        };
    }

    // Trigger to reset user password due to forgotten password
    rpc ForgetPassword (ForgetPasswordRequest) returns (ForgetPasswordResponse) {
        option (google.api.http) = {
            post: "/api/v2/user/forget-password"
            body: "*"
        };
    }

    // Verify forget password token upon forget password action
    rpc ForgetPasswordVerif (ForgetPasswordVerifRequest) returns (ForgetPasswordVerifResponse) {
        option (google.api.http) = {
            post: "/api/v2/user/forget-password/{forgetPwdToken}/verify"
            body: "*"
        };
    }

    // Update user password upon forget password action
    rpc UpdatePassword (UpdatePasswordRequest) returns (UpdatePasswordResponse) {
        option (google.api.http) = {
            put: "/api/v2/user/forget-password"
            body: "*"
        };
    }

    // User info after user logged in.
    rpc UserInfo (google.protobuf.Empty) returns (UserInfoResponse) {
        option (google.api.http) = {
            get: "/api/v1/userinfo"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // Change user password after user logged in.
    rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {
        option (google.api.http) = {
            post: "/api/v1/change-password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // Logout user after user logged in
    rpc Logout (google.protobuf.Empty) returns (LogoutResponse) {
        option (google.api.http) = {
            get: "/api/v2/logout"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // UpdateUserInfo updates user info (name, address, contact)
    rpc UpdateUserInfo (UpdateUserInfoRequest) returns (UpdateUserInfoResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/profile/update"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // GetSignedURL gets the sign url to gain access to uploads files on google cloud storage
    rpc GetSignedURL (google.protobuf.Empty) returns (GetSignedURLResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/signedurl"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // GetAssessmentHistory gets user assessments history.
    rpc GetAssessmentHistory (google.protobuf.Empty) returns (GetAssessmentHistoryResponse) {
        option (google.api.http) = {
            get: "/api/v1/history/assessment"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    rpc SetPrecondition (PreconditionsList) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/user/{patientID}/preconditions"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    rpc GetPrecondition (GetPreconditionRequest) returns (PreconditionsList) {
        option (google.api.http) = {
            get: "/api/v1/user/{patientID}/preconditions"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }
}

message AuthData {
    string email = 1 [(validator.field) = {regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}];
    string password = 2 [(validator.field) = {string_not_empty: true}];
    string passwordConfirmation = 3 [(validator.field) = {string_not_empty: true}];
    string diagnosticSessionID = 4;
}

message ChronicConditionData {
    bool hypertensive = 1;
    bool diabetic = 2;
}

message ProfileData {
    string email = 1 [(validator.field) = {regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}];
    string phone = 2;
    string name = 3 [(validator.field) = {string_not_empty: true}];
    string gender = 4 [(validator.field) = {string_not_empty: true}];
    string address = 5;
    float height = 6;
    float weight = 7;
    bool smokingStatus = 8;
    bool alcoholStatus = 9;
    bool emailVerified = 10;
    bool phoneVerified = 11;
    string password = 12 [(validator.field) = {string_not_empty: true}];
    string birthdate = 13;
    string avatarURL = 14;
}

message LoginRequest {
    AuthData authData = 1;
}

message LoginResponse {
    string loginToken = 1 [(validator.field) = {string_not_empty: true}];
    string personID = 2 [(validator.field) = {string_not_empty: true}];
    string sessionID = 3 [(validator.field) = {string_not_empty: true}];
    bool isVerified = 4;
    string websiteID = 5 [(validator.field) = {string_not_empty: true}];
}

message ConsentResponse {
    string data = 1 [(validator.field) = {string_not_empty: true}];
}

message RegisterRequest {
    AuthData authData = 1;
    ProfileData profileData = 2;
}
message RegisterResponse {
    string message = 1;
}

message ResendEmailVerificationResponse {
    string message = 1;
}

message VerifyRegisterRequest {
    string registerToken = 1 [(validator.field) = {string_not_empty: true}];
    string diagnosticSessionID = 2;
}

message VerifyRegisterResponse {
    string loginToken = 1 [(validator.field) = {string_not_empty: true}];
    string sessionID = 2 [(validator.field) = {string_not_empty: true}];
}

message ForgetPasswordRequest {
    string email = 1 [(validator.field) = {regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}];
    string diagnosticSessionID = 2;
}

message ForgetPasswordResponse {
    string message = 1;
}

message ForgetPasswordVerifRequest {
    string forgetPwdToken = 1 [(validator.field) = {string_not_empty: true}];
}

message ForgetPasswordVerifResponse {
    string message = 1;
}

message UpdatePasswordRequest {
    string password = 1 [(validator.field) = {string_not_empty: true}];
    string confirmPassword = 2 [(validator.field) = {string_not_empty: true}];
    string diagnosticSessionID = 3;
    string forgetPasswordToken = 4;
}

message UpdatePasswordResponse {
    string message = 1;
    string loginToken = 2 [(validator.field) = {string_not_empty: true}];
    string sessionID = 3 [(validator.field) = {string_not_empty: true}];
}

message UserInfoResponse {
    ProfileData profileData = 1;
    bool isVerified = 2;
}

message ChangePasswordRequest {
    string password = 1 [(validator.field) = {string_not_empty: true}];
    string confirmPassword = 2 [(validator.field) = {string_not_empty: true}];
    string oldPassword = 3 [(validator.field) = {string_not_empty: true}];
}

message ChangePasswordResponse {
    string message = 1;
}

message LogoutResponse {
    string message = 1;
}

message UpdateUserInfoRequest {
    ProfileData profileData = 1;
}

message UpdateUserInfoResponse {
    string message = 1;
}

message GetSignedURLResponse {
    string url = 1;
    string name = 2;
}

message OauthGoogleURL {
    string authURL = 1;
}

message CallbackGoogleRequest {
    string state = 1;
    string code = 2;
}

message AssessmentHistory {
    string email = 1;
    google.protobuf.Timestamp datetime = 2;
    string chiefComplaint = 3;
    string name = 4;
    int32 age = 5;
    string gender = 6;
}

message Preconditions {
    string id = 1;
    string type = 2;
    string nameIndo = 3;
    string preconditionsDescription = 4;
    string preconditionsDescriptionCopy = 5;
    int64 ageMonth = 6;
    int64 ageYear = 7;
    float weight = 8;
    float height = 9;
    string name = 10;
}

message GetAssessmentHistoryResponse {
    repeated AssessmentHistory assessmentHistory = 1;
}

message PreconditionsList {
    repeated prixa.diagnostic.v1.PreconditionsData precondList = 1;
    repeated prixa.diagnostic.v1.PreconditionsData AllPreconditions = 2;
    string patientID = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetPreconditionRequest {
    string patientID = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}