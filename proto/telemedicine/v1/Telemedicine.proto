syntax = "proto3";

package prixa.telemedicine.v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    host: "engine2.prixa.ai";
    info: {
        title: "Prixa Telemedicine Service API";
        version: "1.0";
        contact: {
            name: "Prixa Tech";
            url: "https://github.com/prixa-ai/prixa-proto";
            email: "tech@prixa.com";
        };
        license: {
            name: "Prixa License";
            url: "https://github.com/prixa-ai/prixa-proto/blob/master/LICENSE.txt";
        };
    };
    schemes: HTTP;
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-Prixa-API-Key";
            }
        }
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }
    security: {
        security_requirement: {
            key: "ApiKeyAuth";
            value: {}
        }
    }
};

service TelemedicineService {
    // Get area detail data
    rpc GetAreaData (GetAreaRequestData) returns (AreaResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/area/{areaId}"
        };
    }

    // Get areaa list data
    rpc GetAreasData (GetAreasRequestData) returns (AreasResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/area"
        };
    }

    // Get speciality detail data
    rpc GetSpecialityData (GetSpecialityRequestData) returns (SpecialityResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/speciality/{specialityId}"
        };
    }

    // Get specialities list data
    rpc GetSpecialitiesData (GetSpecialitiesRequestData) returns (SpecialitiesResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/speciality"
        };
    }

    // Get hostpital detail data
    rpc GetHospitalData (GetHospitalRequestData) returns (HospitalResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/hospital/{hospitalId}"
        };
    }

    // Get hospitals list data
    rpc GetHospitalsData (GetHospitalsRequestData) returns (HospitalsResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/hospital"
        };
    }

    // Get doctors list data
    rpc GetDoctorsData (GetDoctorsRequestData) returns (DoctorsResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/doctor"
        };
    } 

    // Get doctor data
    rpc GetDoctorData (GetDoctorRequestData) returns (DoctorResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/doctor/{doctorId}"
        };
    }

    // Get doctor Schedules data
    rpc GetDoctorSchedulesData (GetDoctorSchedulesRequestData) returns (DoctorSchedulesResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/schedules/hospital/{hospitalId}/doctor/{doctorId}"
        };
    }

    // Get doctor timeslot data
    rpc GetDoctorTimeSlotsData (GetDoctorTimeSlotRequestData) returns (DoctorTimeSlotsResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/timeslot/hospital/{hospitalId}/doctor/{doctorId}/appointment-date/{appointmentDate}"
        };
    }

    // Create new appointment
    rpc PostAppointmentBookingData(PostAppointmentBookingRequestData) returns (AppointmentBookingResponseData){
        option (google.api.http) = {
            post: "/api/v1/telemedicine/appointment"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // Get appointment booking data
    rpc GetAppointmentBookingData(GetAppointmentBookingRequestData) returns (AppointmentBookingResponseData){
        option (google.api.http) = {
            get: "/api/v1/telemedicine/appointment/{bookingId}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // Get all booking appointments data
    rpc GetAppointmentBookingsData(GetAppointmentBookingsRequestData) returns (AppointmentBookingsResponseData){
        option (google.api.http) = {
            get: "/api/v1/telemedicine/appointments"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }

    // Get Valid Payment Method data
    rpc GetValidPaymentMethodsData (google.protobuf.Empty) returns (PaymentMethodResponseData) {
        option (google.api.http) = {
            get: "/api/v1/telemedicine/payment-method"
        };
    }

    // InitConversation is initialize conversation between user and doctor
    rpc InitConversation(InitConversationRequest) returns (InitConversationResponse) {
        option (google.api.http) = {
            post: "/api/v1/telemedicine/conversation/init"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }
}

message GetAppointmentBookingsRequestData{
    // Param
    FindAppointmentBookingParamData param = 1 [(validator.field) = {msg_exists : true}];
    // From date
    google.protobuf.Timestamp fromDate = 2 [(validator.field) = {msg_exists : true}];
    // To date
    google.protobuf.Timestamp toDate = 3 [(validator.field) = {msg_exists : true}];
}

message FindAppointmentBookingParamData{
    // Patient name
    string patientName = 1;
    // Hospital ID
    string hospitalId = 2 [(validator.field) = {uuid_ver: 4}];
    // Doctor ID
    string doctorId = 3 [(validator.field) = {uuid_ver: 4}];
}

message GetAppointmentBookingRequestData{
    // Booking ID
    string bookingId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message PostAppointmentBookingRequestData{
    // Patient name
    string name = 1 [(validator.field) = {string_not_empty: true}]; 
    // Patient NIk
    string nik = 2 [(validator.field) = {string_not_empty: true, regex: "^[0-9]{16}$"}];
    // Patient email
    string email = 3 [(validator.field) = {string_not_empty: true, regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}]; 
    // Patient phone number
    string phoneNumber = 4 [(validator.field) = {string_not_empty: true, regex: "^[+]?[0-9]{10,13}$"}]; 
    // Payment method
    string paymentMethod = 5 [(validator.field) = {string_not_empty: true}];
    //AppoinmentDate
    string appointmentDate = 6 [(validator.field) = {regex: "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$", string_not_empty: true}];
    //Appointment time
    string appointmentTime = 7 [(validator.field) = {regex: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", string_not_empty: true}];
    // Doctor ID
    string doctorId = 8 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Hospital ID
    string hospitalId = 9 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Schedule ID
    string scheduleId = 10 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // birthdate
    string birthDate  = 11 [(validator.field) = {regex: "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$", string_not_empty: true}];
}

message AppointmentBookingsResponseData{
    // response status
    string status = 1;
    // response message
    string message = 2;
    // Appointment data
    repeated AppointmentBookingData data = 3;
}

message PaymentMethodResponseData{
      // response status
      string status = 1;
      // response message
      string message = 2;
      // PaymentMethod data
      repeated PaymentMethodData data = 3;
}

message PaymentMethodData{
    //payment method name
    string name = 1 [(validator.field) = {string_not_empty: true}];;
}   

message AppointmentBookingResponseData{
    // Appointment booking response status
    string status = 1;
    // Appointment booking response message
    string message = 2;
    // Appointment booking response data
    AppointmentBookingData data = 3;
}

message AppointmentBookingData{
    // Booking ID
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Patient name
    string name = 2;
    // Patient NIK
    string nik = 3;
    // Patient email
    string email = 4;
    // Patient phone number
    string phoneNumber = 5;
    // Patient payment method
    string paymentMethod = 6;
    //AppoinmentDate
    string appointmentDate = 7 [(validator.field) = {regex: "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$", string_not_empty: true}];
    //Appointment time
    string appointmentTime = 8 [(validator.field) = {regex: "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$", string_not_empty: true}];
    // Doctor
    DoctorData doctor = 9;
    // Hospital 
    HospitalData hospital = 10;
    // Booking Status
    string bookingStatus = 11;
    // Appointment created time
    string createdTime = 12;
    //ID of patient registered
    string contactId = 13;
    //name of patient registered
    string contactName = 14;
    //birthDate
    string birthDate = 15;
}

message GetHospitalRequestData{
    // Hospital ID
    string hospitalId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetHospitalsRequestData {
    // Param
    GetHospitalParamData param = 1;
    //page
    int32 page = 2;
}

message GetHospitalParamData{
    // Area ID
    string areaId = 1 [(validator.field) = {uuid_ver: 4}];
    // Hospital keyword
    string nameKeyword = 2;
    // Hospital speciality ID
    repeated string specialities = 3;
    // Hospital coordinate (lat,lon)
    CoordinateData coordinate = 4;
}

message HospitalData {
    // Hospital id
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}]; 
    // Hospital name
    string name = 2;
    // Hospital alias
    string alias = 3;
    // Hospital address
    AddressData address = 4;
    // Hospital contact
    ContactData contact = 5;
    // Hospital coordinate
    CoordinateData coordinate = 6;
    // Hospital image url
    string imageUrl = 7;
    // Hospital accreditation
    string accreditation = 8;
    // Hospital specialities
    string areaId = 9 [(validator.field) = {uuid_ver: 4}]; 
    repeated SpecialityData specialities = 10;
    string lastUpdated = 11;
    SourceData source = 12;
}

message HospitalsResponseData{
    // Hospitals response status
    string status = 1;
    // Hospitals response message
    string message = 2;
    // Hospitals response data
    repeated HospitalData data = 3;
}

message HospitalResponseData{
    // Hospital response status
    string status = 1;
    // Hospital response message
    string message = 2;
    // Hospital response data
    HospitalData data = 3;
}

message GetDoctorRequestData{
    // Doctor ID
    string doctorId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}
message GetDoctorsRequestData {
    // Doctors param
    GetDoctorParamData param = 1;
    // Page
    int32 page = 2;
}

message GetDoctorParamData{
    // Area ID
    string areaId = 1 [(validator.field) = {uuid_ver: 4}];
    // Doctor keyword
    string nameKeyword = 2;
    // Doctor speciality ID
    repeated string specialities = 3;
    // Doctor hospital ID
    repeated string hospitals = 4;
}

message DoctorsResponseData{
    // Doctors response status
    string status = 1;
    // Doctors response message
    string message = 2;
    // Doctors response data
    repeated DoctorData data = 3;
}

message DoctorResponseData{
    // Doctor response status
    string status = 1;
    // Doctor response message
    string message = 2;
    // Doctor response data
    DoctorData data = 3;
}

message DoctorData{
    // Doctor ID
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Doctor name
    string name = 2;
    // Doctor speciality
    SpecialityData speciality = 3;
    // Doctor contact
    ContactData contact = 4;
    // Doctor image url
    string imageUrl = 5;
    // Doctor hospital list
    repeated HospitalData hospitals = 6;
    SourceData source = 7; 
    string lastUpdated = 8;
}

message GetSpecialityRequestData{
    // Speciality ID
    string specialityId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetSpecialitiesRequestData{
    // Area ID
    string areaId = 1 [(validator.field) = {uuid_ver: 4}];
    // Hospital ID
    string hospitalId = 2 [(validator.field) = {uuid_ver: 4}];
    // Page
    int32 page = 3;
}

message SpecialityData{
    // Speciality ID
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Speciality name
    string name = 2;
    // Speciality name indo
    string nameIndo = 3;
    // Speciality image url
    string imageUrl = 4;
    string lastUpdated = 5;
    // Speciality source
    SourceData source = 6;
}

message SpecialitiesResponseData{
    // Specialities response status
    string status = 1;
    // Specialities response message
    string message = 2;
    // Specialities response data
    repeated SpecialityData data = 3;
}

message SpecialityResponseData{
    // Speciality response status
    string status = 1;
    // Speciality response message
    string message = 2;
    // Speciality response data
    SpecialityData data = 3;
}


message GetAreaRequestData{
    // Area ID
    string areaId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetAreasRequestData{
    //page
    int32 page = 1;
}

message AreasResponseData{
    // Areas response status
    string status = 1;
    // Areas response message
    string message = 2;
    // Areas response data
    repeated AreaData data = 3;
}

message AreaResponseData{
    // Area response status
    string status = 1;
    // Area response message
    string message = 2;
    // Area response data
    AreaData data = 3;
}

message AreaData{
    // Area ID
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Area name
    string name = 2;
    // Area image url
    string imageUrl = 3;
    string lastUpdated = 4;
    // Area source
    SourceData source = 5;
}

message ScheduleData{
    string scheduleId = 1 [(validator.field) = {uuid_ver: 4}];
    DoctorData doctor = 2;
    HospitalData hospital = 3;
    int32 day = 4;
    string fromTime = 5;
    string toTime = 6;
    string lastUpdated = 7;
    SourceData source = 8;
}

message DoctorSchedulesResponseData{
    string status = 1;
    string message = 2;
    DoctorScheduleData data = 3;
}

message DoctorScheduleData{
    string doctorId = 1;
    string hospitalId = 2;
    repeated ScheduleData schedules = 3;
    repeated DoctorLeaveHospitalData leaves = 4;
}


message DoctorLeaveHospitalData{
    string doctorId = 1;
    string hospitalId = 2;
    string fromDate = 3;
    string toDate = 4;
}

message GetDoctorSchedulesRequestData{
    string doctorId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}]; 
    string hospitalId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}]; 
    int32 page = 3;
}

message GetDoctorTimeSlotRequestData{
    string hospitalId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string doctorId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string appointmentDate = 3 [(validator.field) = {regex: "^\\d{4}\\-(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])$", string_not_empty: true}];
}


message DoctorTimeSlotsResponseData{
    string status = 1;
    string message = 2;
    repeated DoctorTimeSlotData data = 3;
}

message DoctorTimeSlotData{
    string scheduleId = 1;
    int32 hospitalTimeZone = 2;
    bool isFull = 3 [(validator.field) = {msg_exists : true}];
    string fromTime = 4 [(validator.field) = {string_not_empty: true}];
    string toTime = 5 [(validator.field) = {string_not_empty: true}];
}

message CoordinateData{
    float lattitude = 1;
    float longitude = 2;
}

message AddressData{
    // Kode pos
    string zipCode = 1;
    // Kelurahan
    string village = 2;
    // Kecamatan
    string subDistrict = 3;
    // Kota / kabupaten
    string district = 4;
    // Provinsi
    string province = 5;
    //street
    string street = 6;
}

message SourceData{
    // Source ID
    string sourceId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    // Source Name
    string sourceName = 2;
    // Origin ID
    string originId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message ContactData{
    // Phone no
    string phoneNumber = 1 [(validator.field) = {regex: "^[+]?[0-9]{10,13}$"}];
    // Email
    string email = 2 [(validator.field) = {regex: "^[a-zA-Z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$"}]; 
}

message InitConversationRequest {
    string diagnosticSessionID = 1 [(validator.field) = {string_not_empty: true}];
    string sessionID = 2 [(validator.field) = {string_not_empty: true}];
}

message InitConversationResponse {
    string websiteID = 1 [(validator.field) = {string_not_empty: true}];
}