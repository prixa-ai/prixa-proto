syntax = "proto3";

package prixa.partnerapplication.v1;
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    host: "engine2.prixa.ai";
	info: {
		title: "Prixa Partner App Service API";
		version: "1.0";
		contact: {
			name: "Prixa Tech";
			url: "https://github.com/prixa-ai/prixa-proto";
			email: "tech@prixa.com";
		};
		license: {
			name: "Prixa License";
			url: "https://github.com/prixa-ai/prixa-proto/blob/master/LICENSE.txt";
		};
    };
	schemes: HTTP;
	schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-Prixa-API-Key";
            }
        }
        security: {
            key: "Bearer";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }
};

service PartnerApplicationService {
    rpc CreatePartnerApplication (CreatePartnerApplicationRequest) returns (CreatePartnerApplicationResponse) {
        option (google.api.http) = {
            post: "/api/v1/partner/{partnerId}/application"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }
    rpc DeletePartnerApplication (DeletePartnerApplicationRequest) returns (DeletePartnerApplicationResponse) {
        option (google.api.http) = {
            delete: "/api/v1/partner/{partnerId}/application/{applicationId}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }
    rpc UpdatePartnerApplication (UpdatePartnerApplicationRequest) returns (UpdatePartnerApplicationResponse) {
        option (google.api.http) = {
            put: "/api/v1/partner/{partnerId}/application/{applicationId}"
            body: "*"
        };
    }
    rpc GetPartnerApplication (GetPartnerApplicationRequest) returns (GetPartnerApplicationResponse) {
        option (google.api.http) = {
            get: "/api/v1/partner/{partnerId}/application/{applicationId}"
        };
    }
    rpc ListPartnerApplications (ListPartnerApplicationsRequest) returns (ListPartnerApplicationsResponse) {
        option (google.api.http) = {
            get: "/api/v1/partner/{partnerId}/application"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }
    rpc GetAppMetadata (GetAppMetadataRequest) returns (GetAppMetadataResponse) {
        option (google.api.http) = {
            get: "/api/v1/partner/{partnerId}/application/{applicationId}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
            }
        };
    }
    rpc UpdateAppMetadata (UpdateAppMetadataRequest) returns (UpdateAppMetadataResponse) {
        option (google.api.http) = {
            get: "/api/v1/partner/{partnerId}/application/{applicationId}"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            security: {
                security_requirement: {
                    key: "ApiKeyAuth";
                    value: {}
                }
                security_requirement: {
                    key: "Bearer";
                    value: {}
                }
            }
        };
    }
}

message PartnerAppResponseData {
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string name = 2 [(validator.field) = {string_not_empty: true}];
    string status = 3 [(validator.field) = {string_not_empty: true}];
    string secretKey = 4 [(validator.field) = {string_not_empty: true}];
    google.protobuf.Timestamp createdAt = 5;
    google.protobuf.Timestamp updatedAt = 6;
}

message CreatePartnerApplicationRequest {
    string name = 1 [(validator.field) = {string_not_empty: true}];
    string partnerId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message CreatePartnerApplicationResponse {
    PartnerAppResponseData data = 1;
}

message DeletePartnerApplicationRequest {
    string partnerId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string applicationId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message DeletePartnerApplicationResponse {
    PartnerAppResponseData data = 1;
}

message UpdatePartnerApplicationRequest {
    string name = 1 [(validator.field) = {string_not_empty: true}];
    string partnerId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string applicationId = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message UpdatePartnerApplicationResponse {
    PartnerAppResponseData data = 1;
}

message GetPartnerApplicationRequest {
    string partnerId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string applicationId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetPartnerApplicationResponse {
    PartnerAppResponseData data = 1;
}

message ListPartnerApplicationsRequest {
    string partnerId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message ListPartnersRequest {
    string partnerId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message ListPartnerApplicationsResponse {
    repeated PartnerAppResponseData data = 1;
}

message GetAppMetadataRequest {
    string partnerId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string applicationId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message AppMetadata {
    string formURL = 1;
    string hotline = 2;
}

message GetAppMetadataResponse {
    AppMetadata metadata = 1;
}

message UpdateAppMetadataRequest {
    string partnerId = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    string applicationId = 2 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
    AppMetadata metadata = 3;
}

message UpdateAppMetadataResponse {
    string message = 1;
}